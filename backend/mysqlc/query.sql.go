// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package mysqlc

import (
	"context"
	"database/sql"
)

const createClinic = `-- name: CreateClinic :execresult
INSERT INTO clinics (user_id, name, location, business_no)
VALUES (?, ?, ?, ?)
`

type CreateClinicParams struct {
	UserID     uint32
	Name       string
	Location   string
	BusinessNo string
}

func (q *Queries) CreateClinic(ctx context.Context, arg CreateClinicParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createClinic,
		arg.UserID,
		arg.Name,
		arg.Location,
		arg.BusinessNo,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (given_name, family_name, email, password, role_id)
VALUES (?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	GivenName  string
	FamilyName string
	Email      string
	Password   string
	RoleID     uint8
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.GivenName,
		arg.FamilyName,
		arg.Email,
		arg.Password,
		arg.RoleID,
	)
}

const getClinic = `-- name: GetClinic :one
SELECT clinics.id, clinics.user_id, clinics.name, clinics.location, clinics.business_no, clinics.is_verified, users.id, users.given_name, users.family_name, users.email, users.password, users.role_id, roles.description AS user_role
FROM clinics
    JOIN users ON users.id = user_id
    JOIN roles ON roles.id = users.role_id
WHERE user_id = ?
`

type GetClinicRow struct {
	ID         uint32
	UserID     uint32
	Name       string
	Location   string
	BusinessNo string
	IsVerified uint8
	User       User
	UserRole   string
}

func (q *Queries) GetClinic(ctx context.Context, userID uint32) (GetClinicRow, error) {
	row := q.db.QueryRowContext(ctx, getClinic, userID)
	var i GetClinicRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Location,
		&i.BusinessNo,
		&i.IsVerified,
		&i.User.ID,
		&i.User.GivenName,
		&i.User.FamilyName,
		&i.User.Email,
		&i.User.Password,
		&i.User.RoleID,
		&i.UserRole,
	)
	return i, err
}

const getClinicByBusinessNo = `-- name: GetClinicByBusinessNo :one
SELECT id, user_id, name, location, business_no, is_verified FROM clinics WHERE business_no = ?
`

func (q *Queries) GetClinicByBusinessNo(ctx context.Context, businessNo string) (Clinic, error) {
	row := q.db.QueryRowContext(ctx, getClinicByBusinessNo, businessNo)
	var i Clinic
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Location,
		&i.BusinessNo,
		&i.IsVerified,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one

SELECT users.id, users.given_name, users.family_name, users.email, users.password, users.role_id, roles.description AS user_role
FROM users JOIN roles ON roles.id = users.role_id
WHERE email = ?
`

type GetUserByEmailRow struct {
	ID         uint32
	GivenName  string
	FamilyName string
	Email      string
	Password   string
	RoleID     uint8
	UserRole   string
}

// noinspection SqlResolveForFile
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.GivenName,
		&i.FamilyName,
		&i.Email,
		&i.Password,
		&i.RoleID,
		&i.UserRole,
	)
	return i, err
}

const listClinics = `-- name: ListClinics :many
SELECT clinics.id, clinics.user_id, clinics.name, clinics.location, clinics.business_no, clinics.is_verified, users.id, users.given_name, users.family_name, users.email, users.password, users.role_id, roles.description AS user_role
FROM clinics
    JOIN users ON users.id = user_id
    JOIN roles ON roles.id = users.role_id
`

type ListClinicsRow struct {
	ID         uint32
	UserID     uint32
	Name       string
	Location   string
	BusinessNo string
	IsVerified uint8
	User       User
	UserRole   string
}

func (q *Queries) ListClinics(ctx context.Context) ([]ListClinicsRow, error) {
	rows, err := q.db.QueryContext(ctx, listClinics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClinicsRow
	for rows.Next() {
		var i ListClinicsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Location,
			&i.BusinessNo,
			&i.IsVerified,
			&i.User.ID,
			&i.User.GivenName,
			&i.User.FamilyName,
			&i.User.Email,
			&i.User.Password,
			&i.User.RoleID,
			&i.UserRole,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT users.id, users.given_name, users.family_name, users.email, users.password, users.role_id, roles.description AS user_role
FROM users JOIN roles ON roles.id = users.role_id
`

type ListUsersRow struct {
	ID         uint32
	GivenName  string
	FamilyName string
	Email      string
	Password   string
	RoleID     uint8
	UserRole   string
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.GivenName,
			&i.FamilyName,
			&i.Email,
			&i.Password,
			&i.RoleID,
			&i.UserRole,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserVerified = `-- name: UpdateUserVerified :exec
UPDATE users SET role_id = ? WHERE id = ?
`

type UpdateUserVerifiedParams struct {
	RoleID uint8
	ID     uint32
}

func (q *Queries) UpdateUserVerified(ctx context.Context, arg UpdateUserVerifiedParams) error {
	_, err := q.db.ExecContext(ctx, updateUserVerified, arg.RoleID, arg.ID)
	return err
}
