// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/im"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Employee is an object representing the database table.
type Employee struct {
	ID       uint32 `db:"id,pk,autoincr" `
	UserID   uint32 `db:"user_id" `
	ClinicID uint32 `db:"clinic_id" `

	R employeeR `db:"-" `
}

// EmployeeSlice is an alias for a slice of pointers to Employee.
// This should almost always be used instead of []*Employee.
type EmployeeSlice []*Employee

// Employees contains methods to work with the employees table
var Employees = mysql.NewTablex[*Employee, EmployeeSlice, *EmployeeSetter]("employees", []string{"id"})

// EmployeesQuery is a query on the employees table
type EmployeesQuery = *mysql.ViewQuery[*Employee, EmployeeSlice]

// EmployeesStmt is a prepared statment on employees
type EmployeesStmt = bob.QueryStmt[*Employee, EmployeeSlice]

// employeeR is where relationships are stored.
type employeeR struct {
	Clinic *Clinic // fk_employees_clinics_clinic_id
	User   *User   // fk_employees_users_user_id
}

// EmployeeSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type EmployeeSetter struct {
	ID       omit.Val[uint32] `db:"id,pk,autoincr" `
	UserID   omit.Val[uint32] `db:"user_id" `
	ClinicID omit.Val[uint32] `db:"clinic_id" `
}

func (s EmployeeSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.ClinicID.IsUnset() {
		vals = append(vals, "clinic_id")
	}

	return vals
}

func (s EmployeeSetter) Overwrite(t *Employee) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.ClinicID.IsUnset() {
		t.ClinicID, _ = s.ClinicID.Get()
	}
}

func (s EmployeeSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 3)
	if s.ID.IsUnset() {
		vals[0] = mysql.Raw("DEFAULT")
	} else {
		vals[0] = mysql.Arg(s.ID)
	}

	if s.UserID.IsUnset() {
		vals[1] = mysql.Raw("DEFAULT")
	} else {
		vals[1] = mysql.Arg(s.UserID)
	}

	if s.ClinicID.IsUnset() {
		vals[2] = mysql.Raw("DEFAULT")
	} else {
		vals[2] = mysql.Arg(s.ClinicID)
	}

	return im.Values(vals...)
}

func (s EmployeeSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions("employees")...).Apply(q)
}

func (s EmployeeSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "user_id")...),
			mysql.Arg(s.UserID),
		}})
	}

	if !s.ClinicID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "clinic_id")...),
			mysql.Arg(s.ClinicID),
		}})
	}

	return exprs
}

type employeeColumnNames struct {
	ID       string
	UserID   string
	ClinicID string
}

var EmployeeColumns = buildEmployeeColumns("employees")

type employeeColumns struct {
	tableAlias string
	ID         mysql.Expression
	UserID     mysql.Expression
	ClinicID   mysql.Expression
}

func (c employeeColumns) Alias() string {
	return c.tableAlias
}

func (employeeColumns) AliasedAs(alias string) employeeColumns {
	return buildEmployeeColumns(alias)
}

func buildEmployeeColumns(alias string) employeeColumns {
	return employeeColumns{
		tableAlias: alias,
		ID:         mysql.Quote(alias, "id"),
		UserID:     mysql.Quote(alias, "user_id"),
		ClinicID:   mysql.Quote(alias, "clinic_id"),
	}
}

type employeeWhere[Q mysql.Filterable] struct {
	ID       mysql.WhereMod[Q, uint32]
	UserID   mysql.WhereMod[Q, uint32]
	ClinicID mysql.WhereMod[Q, uint32]
}

func (employeeWhere[Q]) AliasedAs(alias string) employeeWhere[Q] {
	return buildEmployeeWhere[Q](buildEmployeeColumns(alias))
}

func buildEmployeeWhere[Q mysql.Filterable](cols employeeColumns) employeeWhere[Q] {
	return employeeWhere[Q]{
		ID:       mysql.Where[Q, uint32](cols.ID),
		UserID:   mysql.Where[Q, uint32](cols.UserID),
		ClinicID: mysql.Where[Q, uint32](cols.ClinicID),
	}
}

type employeeJoins[Q dialect.Joinable] struct {
	typ    string
	Clinic func(context.Context) modAs[Q, clinicColumns]
	User   func(context.Context) modAs[Q, userColumns]
}

func (j employeeJoins[Q]) aliasedAs(alias string) employeeJoins[Q] {
	return buildEmployeeJoins[Q](buildEmployeeColumns(alias), j.typ)
}

func buildEmployeeJoins[Q dialect.Joinable](cols employeeColumns, typ string) employeeJoins[Q] {
	return employeeJoins[Q]{
		typ:    typ,
		Clinic: employeesJoinClinic[Q](cols, typ),
		User:   employeesJoinUser[Q](cols, typ),
	}
}

// FindEmployee retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindEmployee(ctx context.Context, exec bob.Executor, IDPK uint32, cols ...string) (*Employee, error) {
	if len(cols) == 0 {
		return Employees.Query(
			ctx, exec,
			SelectWhere.Employees.ID.EQ(IDPK),
		).One()
	}

	return Employees.Query(
		ctx, exec,
		SelectWhere.Employees.ID.EQ(IDPK),
		sm.Columns(Employees.Columns().Only(cols...)),
	).One()
}

// EmployeeExists checks the presence of a single record by primary key
func EmployeeExists(ctx context.Context, exec bob.Executor, IDPK uint32) (bool, error) {
	return Employees.Query(
		ctx, exec,
		SelectWhere.Employees.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Employee
func (o *Employee) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

// Update uses an executor to update the Employee
func (o *Employee) Update(ctx context.Context, exec bob.Executor, s *EmployeeSetter) error {
	return Employees.Update(ctx, exec, s, o)
}

// Delete deletes a single Employee record with an executor
func (o *Employee) Delete(ctx context.Context, exec bob.Executor) error {
	return Employees.Delete(ctx, exec, o)
}

// Reload refreshes the Employee using the executor
func (o *Employee) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Employees.Query(
		ctx, exec,
		SelectWhere.Employees.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o EmployeeSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals EmployeeSetter) error {
	return Employees.Update(ctx, exec, &vals, o...)
}

func (o EmployeeSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Employees.Delete(ctx, exec, o...)
}

func (o EmployeeSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uint32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Employees.ID.In(IDPK...),
	)

	o2, err := Employees.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func employeesJoinClinic[Q dialect.Joinable](from employeeColumns, typ string) func(context.Context) modAs[Q, clinicColumns] {
	return func(ctx context.Context) modAs[Q, clinicColumns] {
		return modAs[Q, clinicColumns]{
			c: ClinicColumns,
			f: func(to clinicColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Clinics.Name(ctx).As(to.Alias())).On(
						to.ID.EQ(from.ClinicID),
					))
				}

				return mods
			},
		}
	}
}

func employeesJoinUser[Q dialect.Joinable](from employeeColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name(ctx).As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// Clinic starts a query for related objects on clinics
func (o *Employee) Clinic(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ClinicsQuery {
	return Clinics.Query(ctx, exec, append(mods,
		sm.Where(ClinicColumns.ID.EQ(mysql.Arg(o.ClinicID))),
	)...)
}

func (os EmployeeSlice) Clinic(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ClinicsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.ClinicID)
	}

	return Clinics.Query(ctx, exec, append(mods,
		sm.Where(mysql.Group(ClinicColumns.ID).In(PKArgs...)),
	)...)
}

// User starts a query for related objects on users
func (o *Employee) User(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(ctx, exec, append(mods,
		sm.Where(UserColumns.ID.EQ(mysql.Arg(o.UserID))),
	)...)
}

func (os EmployeeSlice) User(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.UserID)
	}

	return Users.Query(ctx, exec, append(mods,
		sm.Where(mysql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Employee) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Clinic":
		rel, ok := retrieved.(*Clinic)
		if !ok {
			return fmt.Errorf("employee cannot load %T as %q", retrieved, name)
		}

		o.R.Clinic = rel

		if rel != nil {
			rel.R.Employees = EmployeeSlice{o}
		}
		return nil
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("employee cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Employees = EmployeeSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("employee has no relationship %q", name)
	}
}

func PreloadEmployeeClinic(opts ...mysql.PreloadOption) mysql.Preloader {
	return mysql.Preload[*Clinic, ClinicSlice](orm.Relationship{
		Name: "Clinic",
		Sides: []orm.RelSide{
			{
				From: "employees",
				To:   TableNames.Clinics,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Clinics.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Employees.ClinicID,
				},
				ToColumns: []string{
					ColumnNames.Clinics.ID,
				},
			},
		},
	}, Clinics.Columns().Names(), opts...)
}

func ThenLoadEmployeeClinic(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadEmployeeClinic(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load EmployeeClinic", retrieved)
		}

		err := loader.LoadEmployeeClinic(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadEmployeeClinic loads the employee's Clinic into the .R struct
func (o *Employee) LoadEmployeeClinic(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Clinic = nil

	related, err := o.Clinic(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Employees = EmployeeSlice{o}

	o.R.Clinic = related
	return nil
}

// LoadEmployeeClinic loads the employee's Clinic into the .R struct
func (os EmployeeSlice) LoadEmployeeClinic(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	clinics, err := os.Clinic(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range clinics {
			if o.ClinicID != rel.ID {
				continue
			}

			rel.R.Employees = append(rel.R.Employees, o)

			o.R.Clinic = rel
			break
		}
	}

	return nil
}

func PreloadEmployeeUser(opts ...mysql.PreloadOption) mysql.Preloader {
	return mysql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: "employees",
				To:   TableNames.Users,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Users.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Employees.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadEmployeeUser(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadEmployeeUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load EmployeeUser", retrieved)
		}

		err := loader.LoadEmployeeUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadEmployeeUser loads the employee's User into the .R struct
func (o *Employee) LoadEmployeeUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Employees = EmployeeSlice{o}

	o.R.User = related
	return nil
}

// LoadEmployeeUser loads the employee's User into the .R struct
func (os EmployeeSlice) LoadEmployeeUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.Employees = append(rel.R.Employees, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachEmployeeClinic0(ctx context.Context, exec bob.Executor, count int, employee0 *Employee, clinic1 *Clinic) (*Employee, error) {
	setter := &EmployeeSetter{
		ClinicID: omit.From(clinic1.ID),
	}

	err := Employees.Update(ctx, exec, setter, employee0)
	if err != nil {
		return nil, fmt.Errorf("attachEmployeeClinic0: %w", err)
	}

	return employee0, nil
}

func (employee0 *Employee) InsertClinic(ctx context.Context, exec bob.Executor, related *ClinicSetter) error {
	clinic1, err := Clinics.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachEmployeeClinic0(ctx, exec, 1, employee0, clinic1)
	if err != nil {
		return err
	}

	employee0.R.Clinic = clinic1

	clinic1.R.Employees = append(clinic1.R.Employees, employee0)

	return nil
}

func (employee0 *Employee) AttachClinic(ctx context.Context, exec bob.Executor, clinic1 *Clinic) error {
	var err error

	_, err = attachEmployeeClinic0(ctx, exec, 1, employee0, clinic1)
	if err != nil {
		return err
	}

	employee0.R.Clinic = clinic1

	clinic1.R.Employees = append(clinic1.R.Employees, employee0)

	return nil
}

func attachEmployeeUser0(ctx context.Context, exec bob.Executor, count int, employee0 *Employee, user1 *User) (*Employee, error) {
	setter := &EmployeeSetter{
		UserID: omit.From(user1.ID),
	}

	err := Employees.Update(ctx, exec, setter, employee0)
	if err != nil {
		return nil, fmt.Errorf("attachEmployeeUser0: %w", err)
	}

	return employee0, nil
}

func (employee0 *Employee) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachEmployeeUser0(ctx, exec, 1, employee0, user1)
	if err != nil {
		return err
	}

	employee0.R.User = user1

	user1.R.Employees = append(user1.R.Employees, employee0)

	return nil
}

func (employee0 *Employee) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachEmployeeUser0(ctx, exec, 1, employee0, user1)
	if err != nil {
		return err
	}

	employee0.R.User = user1

	user1.R.Employees = append(user1.R.Employees, employee0)

	return nil
}
