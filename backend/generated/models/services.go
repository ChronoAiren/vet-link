// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/im"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Service is an object representing the database table.
type Service struct {
	ID          uint32 `db:"id,pk,autoincr" `
	ClinicID    uint32 `db:"clinic_id" `
	Description string `db:"description" `

	R serviceR `db:"-" `
}

// ServiceSlice is an alias for a slice of pointers to Service.
// This should almost always be used instead of []*Service.
type ServiceSlice []*Service

// Services contains methods to work with the services table
var Services = mysql.NewTablex[*Service, ServiceSlice, *ServiceSetter]("services", []string{"id"})

// ServicesQuery is a query on the services table
type ServicesQuery = *mysql.ViewQuery[*Service, ServiceSlice]

// ServicesStmt is a prepared statment on services
type ServicesStmt = bob.QueryStmt[*Service, ServiceSlice]

// serviceR is where relationships are stored.
type serviceR struct {
	Clinic *Clinic // fk_services_clinics_clinic_id
}

// ServiceSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ServiceSetter struct {
	ID          omit.Val[uint32] `db:"id,pk,autoincr" `
	ClinicID    omit.Val[uint32] `db:"clinic_id" `
	Description omit.Val[string] `db:"description" `
}

func (s ServiceSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.ClinicID.IsUnset() {
		vals = append(vals, "clinic_id")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	return vals
}

func (s ServiceSetter) Overwrite(t *Service) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.ClinicID.IsUnset() {
		t.ClinicID, _ = s.ClinicID.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.Get()
	}
}

func (s ServiceSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 3)
	if s.ID.IsUnset() {
		vals[0] = mysql.Raw("DEFAULT")
	} else {
		vals[0] = mysql.Arg(s.ID)
	}

	if s.ClinicID.IsUnset() {
		vals[1] = mysql.Raw("DEFAULT")
	} else {
		vals[1] = mysql.Arg(s.ClinicID)
	}

	if s.Description.IsUnset() {
		vals[2] = mysql.Raw("DEFAULT")
	} else {
		vals[2] = mysql.Arg(s.Description)
	}

	return im.Values(vals...)
}

func (s ServiceSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions("services")...).Apply(q)
}

func (s ServiceSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if !s.ClinicID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "clinic_id")...),
			mysql.Arg(s.ClinicID),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "description")...),
			mysql.Arg(s.Description),
		}})
	}

	return exprs
}

type serviceColumnNames struct {
	ID          string
	ClinicID    string
	Description string
}

var ServiceColumns = buildServiceColumns("services")

type serviceColumns struct {
	tableAlias  string
	ID          mysql.Expression
	ClinicID    mysql.Expression
	Description mysql.Expression
}

func (c serviceColumns) Alias() string {
	return c.tableAlias
}

func (serviceColumns) AliasedAs(alias string) serviceColumns {
	return buildServiceColumns(alias)
}

func buildServiceColumns(alias string) serviceColumns {
	return serviceColumns{
		tableAlias:  alias,
		ID:          mysql.Quote(alias, "id"),
		ClinicID:    mysql.Quote(alias, "clinic_id"),
		Description: mysql.Quote(alias, "description"),
	}
}

type serviceWhere[Q mysql.Filterable] struct {
	ID          mysql.WhereMod[Q, uint32]
	ClinicID    mysql.WhereMod[Q, uint32]
	Description mysql.WhereMod[Q, string]
}

func (serviceWhere[Q]) AliasedAs(alias string) serviceWhere[Q] {
	return buildServiceWhere[Q](buildServiceColumns(alias))
}

func buildServiceWhere[Q mysql.Filterable](cols serviceColumns) serviceWhere[Q] {
	return serviceWhere[Q]{
		ID:          mysql.Where[Q, uint32](cols.ID),
		ClinicID:    mysql.Where[Q, uint32](cols.ClinicID),
		Description: mysql.Where[Q, string](cols.Description),
	}
}

type serviceJoins[Q dialect.Joinable] struct {
	typ    string
	Clinic func(context.Context) modAs[Q, clinicColumns]
}

func (j serviceJoins[Q]) aliasedAs(alias string) serviceJoins[Q] {
	return buildServiceJoins[Q](buildServiceColumns(alias), j.typ)
}

func buildServiceJoins[Q dialect.Joinable](cols serviceColumns, typ string) serviceJoins[Q] {
	return serviceJoins[Q]{
		typ:    typ,
		Clinic: servicesJoinClinic[Q](cols, typ),
	}
}

// FindService retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindService(ctx context.Context, exec bob.Executor, IDPK uint32, cols ...string) (*Service, error) {
	if len(cols) == 0 {
		return Services.Query(
			ctx, exec,
			SelectWhere.Services.ID.EQ(IDPK),
		).One()
	}

	return Services.Query(
		ctx, exec,
		SelectWhere.Services.ID.EQ(IDPK),
		sm.Columns(Services.Columns().Only(cols...)),
	).One()
}

// ServiceExists checks the presence of a single record by primary key
func ServiceExists(ctx context.Context, exec bob.Executor, IDPK uint32) (bool, error) {
	return Services.Query(
		ctx, exec,
		SelectWhere.Services.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Service
func (o *Service) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

// Update uses an executor to update the Service
func (o *Service) Update(ctx context.Context, exec bob.Executor, s *ServiceSetter) error {
	return Services.Update(ctx, exec, s, o)
}

// Delete deletes a single Service record with an executor
func (o *Service) Delete(ctx context.Context, exec bob.Executor) error {
	return Services.Delete(ctx, exec, o)
}

// Reload refreshes the Service using the executor
func (o *Service) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Services.Query(
		ctx, exec,
		SelectWhere.Services.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o ServiceSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ServiceSetter) error {
	return Services.Update(ctx, exec, &vals, o...)
}

func (o ServiceSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Services.Delete(ctx, exec, o...)
}

func (o ServiceSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uint32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Services.ID.In(IDPK...),
	)

	o2, err := Services.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func servicesJoinClinic[Q dialect.Joinable](from serviceColumns, typ string) func(context.Context) modAs[Q, clinicColumns] {
	return func(ctx context.Context) modAs[Q, clinicColumns] {
		return modAs[Q, clinicColumns]{
			c: ClinicColumns,
			f: func(to clinicColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Clinics.Name(ctx).As(to.Alias())).On(
						to.ID.EQ(from.ClinicID),
					))
				}

				return mods
			},
		}
	}
}

// Clinic starts a query for related objects on clinics
func (o *Service) Clinic(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ClinicsQuery {
	return Clinics.Query(ctx, exec, append(mods,
		sm.Where(ClinicColumns.ID.EQ(mysql.Arg(o.ClinicID))),
	)...)
}

func (os ServiceSlice) Clinic(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) ClinicsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.ClinicID)
	}

	return Clinics.Query(ctx, exec, append(mods,
		sm.Where(mysql.Group(ClinicColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Service) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Clinic":
		rel, ok := retrieved.(*Clinic)
		if !ok {
			return fmt.Errorf("service cannot load %T as %q", retrieved, name)
		}

		o.R.Clinic = rel

		if rel != nil {
			rel.R.Services = ServiceSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("service has no relationship %q", name)
	}
}

func PreloadServiceClinic(opts ...mysql.PreloadOption) mysql.Preloader {
	return mysql.Preload[*Clinic, ClinicSlice](orm.Relationship{
		Name: "Clinic",
		Sides: []orm.RelSide{
			{
				From: "services",
				To:   TableNames.Clinics,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Clinics.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Services.ClinicID,
				},
				ToColumns: []string{
					ColumnNames.Clinics.ID,
				},
			},
		},
	}, Clinics.Columns().Names(), opts...)
}

func ThenLoadServiceClinic(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadServiceClinic(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load ServiceClinic", retrieved)
		}

		err := loader.LoadServiceClinic(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadServiceClinic loads the service's Clinic into the .R struct
func (o *Service) LoadServiceClinic(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Clinic = nil

	related, err := o.Clinic(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Services = ServiceSlice{o}

	o.R.Clinic = related
	return nil
}

// LoadServiceClinic loads the service's Clinic into the .R struct
func (os ServiceSlice) LoadServiceClinic(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	clinics, err := os.Clinic(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range clinics {
			if o.ClinicID != rel.ID {
				continue
			}

			rel.R.Services = append(rel.R.Services, o)

			o.R.Clinic = rel
			break
		}
	}

	return nil
}

func attachServiceClinic0(ctx context.Context, exec bob.Executor, count int, service0 *Service, clinic1 *Clinic) (*Service, error) {
	setter := &ServiceSetter{
		ClinicID: omit.From(clinic1.ID),
	}

	err := Services.Update(ctx, exec, setter, service0)
	if err != nil {
		return nil, fmt.Errorf("attachServiceClinic0: %w", err)
	}

	return service0, nil
}

func (service0 *Service) InsertClinic(ctx context.Context, exec bob.Executor, related *ClinicSetter) error {
	clinic1, err := Clinics.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachServiceClinic0(ctx, exec, 1, service0, clinic1)
	if err != nil {
		return err
	}

	service0.R.Clinic = clinic1

	clinic1.R.Services = append(clinic1.R.Services, service0)

	return nil
}

func (service0 *Service) AttachClinic(ctx context.Context, exec bob.Executor, clinic1 *Clinic) error {
	var err error

	_, err = attachServiceClinic0(ctx, exec, 1, service0, clinic1)
	if err != nil {
		return err
	}

	service0.R.Clinic = clinic1

	clinic1.R.Services = append(clinic1.R.Services, service0)

	return nil
}
