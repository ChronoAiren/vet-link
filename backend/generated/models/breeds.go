// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/im"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Breed is an object representing the database table.
type Breed struct {
	ID          uint32 `db:"id,pk,autoincr" `
	AnimalID    uint8  `db:"animal_id" `
	Description string `db:"description" `

	R breedR `db:"-" `
}

// BreedSlice is an alias for a slice of pointers to Breed.
// This should almost always be used instead of []*Breed.
type BreedSlice []*Breed

// Breeds contains methods to work with the breeds table
var Breeds = mysql.NewTablex[*Breed, BreedSlice, *BreedSetter]("breeds", []string{"id"})

// BreedsQuery is a query on the breeds table
type BreedsQuery = *mysql.ViewQuery[*Breed, BreedSlice]

// BreedsStmt is a prepared statment on breeds
type BreedsStmt = bob.QueryStmt[*Breed, BreedSlice]

// breedR is where relationships are stored.
type breedR struct {
	Animal *Animal  // fk_breeds_animals_animal_id
	Pets   PetSlice // fk_pets_breeds_breed_id
}

// BreedSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type BreedSetter struct {
	ID          omit.Val[uint32] `db:"id,pk,autoincr" `
	AnimalID    omit.Val[uint8]  `db:"animal_id" `
	Description omit.Val[string] `db:"description" `
}

func (s BreedSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.AnimalID.IsUnset() {
		vals = append(vals, "animal_id")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	return vals
}

func (s BreedSetter) Overwrite(t *Breed) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.AnimalID.IsUnset() {
		t.AnimalID, _ = s.AnimalID.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.Get()
	}
}

func (s BreedSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 3)
	if s.ID.IsUnset() {
		vals[0] = mysql.Raw("DEFAULT")
	} else {
		vals[0] = mysql.Arg(s.ID)
	}

	if s.AnimalID.IsUnset() {
		vals[1] = mysql.Raw("DEFAULT")
	} else {
		vals[1] = mysql.Arg(s.AnimalID)
	}

	if s.Description.IsUnset() {
		vals[2] = mysql.Raw("DEFAULT")
	} else {
		vals[2] = mysql.Arg(s.Description)
	}

	return im.Values(vals...)
}

func (s BreedSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions("breeds")...).Apply(q)
}

func (s BreedSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if !s.AnimalID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "animal_id")...),
			mysql.Arg(s.AnimalID),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "description")...),
			mysql.Arg(s.Description),
		}})
	}

	return exprs
}

type breedColumnNames struct {
	ID          string
	AnimalID    string
	Description string
}

var BreedColumns = buildBreedColumns("breeds")

type breedColumns struct {
	tableAlias  string
	ID          mysql.Expression
	AnimalID    mysql.Expression
	Description mysql.Expression
}

func (c breedColumns) Alias() string {
	return c.tableAlias
}

func (breedColumns) AliasedAs(alias string) breedColumns {
	return buildBreedColumns(alias)
}

func buildBreedColumns(alias string) breedColumns {
	return breedColumns{
		tableAlias:  alias,
		ID:          mysql.Quote(alias, "id"),
		AnimalID:    mysql.Quote(alias, "animal_id"),
		Description: mysql.Quote(alias, "description"),
	}
}

type breedWhere[Q mysql.Filterable] struct {
	ID          mysql.WhereMod[Q, uint32]
	AnimalID    mysql.WhereMod[Q, uint8]
	Description mysql.WhereMod[Q, string]
}

func (breedWhere[Q]) AliasedAs(alias string) breedWhere[Q] {
	return buildBreedWhere[Q](buildBreedColumns(alias))
}

func buildBreedWhere[Q mysql.Filterable](cols breedColumns) breedWhere[Q] {
	return breedWhere[Q]{
		ID:          mysql.Where[Q, uint32](cols.ID),
		AnimalID:    mysql.Where[Q, uint8](cols.AnimalID),
		Description: mysql.Where[Q, string](cols.Description),
	}
}

type breedJoins[Q dialect.Joinable] struct {
	typ    string
	Animal func(context.Context) modAs[Q, animalColumns]
	Pets   func(context.Context) modAs[Q, petColumns]
}

func (j breedJoins[Q]) aliasedAs(alias string) breedJoins[Q] {
	return buildBreedJoins[Q](buildBreedColumns(alias), j.typ)
}

func buildBreedJoins[Q dialect.Joinable](cols breedColumns, typ string) breedJoins[Q] {
	return breedJoins[Q]{
		typ:    typ,
		Animal: breedsJoinAnimal[Q](cols, typ),
		Pets:   breedsJoinPets[Q](cols, typ),
	}
}

// FindBreed retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindBreed(ctx context.Context, exec bob.Executor, IDPK uint32, cols ...string) (*Breed, error) {
	if len(cols) == 0 {
		return Breeds.Query(
			ctx, exec,
			SelectWhere.Breeds.ID.EQ(IDPK),
		).One()
	}

	return Breeds.Query(
		ctx, exec,
		SelectWhere.Breeds.ID.EQ(IDPK),
		sm.Columns(Breeds.Columns().Only(cols...)),
	).One()
}

// BreedExists checks the presence of a single record by primary key
func BreedExists(ctx context.Context, exec bob.Executor, IDPK uint32) (bool, error) {
	return Breeds.Query(
		ctx, exec,
		SelectWhere.Breeds.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Breed
func (o *Breed) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

// Update uses an executor to update the Breed
func (o *Breed) Update(ctx context.Context, exec bob.Executor, s *BreedSetter) error {
	return Breeds.Update(ctx, exec, s, o)
}

// Delete deletes a single Breed record with an executor
func (o *Breed) Delete(ctx context.Context, exec bob.Executor) error {
	return Breeds.Delete(ctx, exec, o)
}

// Reload refreshes the Breed using the executor
func (o *Breed) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Breeds.Query(
		ctx, exec,
		SelectWhere.Breeds.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o BreedSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals BreedSetter) error {
	return Breeds.Update(ctx, exec, &vals, o...)
}

func (o BreedSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Breeds.Delete(ctx, exec, o...)
}

func (o BreedSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uint32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Breeds.ID.In(IDPK...),
	)

	o2, err := Breeds.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func breedsJoinAnimal[Q dialect.Joinable](from breedColumns, typ string) func(context.Context) modAs[Q, animalColumns] {
	return func(ctx context.Context) modAs[Q, animalColumns] {
		return modAs[Q, animalColumns]{
			c: AnimalColumns,
			f: func(to animalColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Animals.Name(ctx).As(to.Alias())).On(
						to.ID.EQ(from.AnimalID),
					))
				}

				return mods
			},
		}
	}
}

func breedsJoinPets[Q dialect.Joinable](from breedColumns, typ string) func(context.Context) modAs[Q, petColumns] {
	return func(ctx context.Context) modAs[Q, petColumns] {
		return modAs[Q, petColumns]{
			c: PetColumns,
			f: func(to petColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Pets.Name(ctx).As(to.Alias())).On(
						to.BreedID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// Animal starts a query for related objects on animals
func (o *Breed) Animal(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AnimalsQuery {
	return Animals.Query(ctx, exec, append(mods,
		sm.Where(AnimalColumns.ID.EQ(mysql.Arg(o.AnimalID))),
	)...)
}

func (os BreedSlice) Animal(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) AnimalsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.AnimalID)
	}

	return Animals.Query(ctx, exec, append(mods,
		sm.Where(mysql.Group(AnimalColumns.ID).In(PKArgs...)),
	)...)
}

// Pets starts a query for related objects on pets
func (o *Breed) Pets(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PetsQuery {
	return Pets.Query(ctx, exec, append(mods,
		sm.Where(PetColumns.BreedID.EQ(mysql.Arg(o.ID))),
	)...)
}

func (os BreedSlice) Pets(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PetsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.ID)
	}

	return Pets.Query(ctx, exec, append(mods,
		sm.Where(mysql.Group(PetColumns.BreedID).In(PKArgs...)),
	)...)
}

func (o *Breed) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Animal":
		rel, ok := retrieved.(*Animal)
		if !ok {
			return fmt.Errorf("breed cannot load %T as %q", retrieved, name)
		}

		o.R.Animal = rel

		if rel != nil {
			rel.R.Breeds = BreedSlice{o}
		}
		return nil
	case "Pets":
		rels, ok := retrieved.(PetSlice)
		if !ok {
			return fmt.Errorf("breed cannot load %T as %q", retrieved, name)
		}

		o.R.Pets = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Breed = o
			}
		}
		return nil
	default:
		return fmt.Errorf("breed has no relationship %q", name)
	}
}

func PreloadBreedAnimal(opts ...mysql.PreloadOption) mysql.Preloader {
	return mysql.Preload[*Animal, AnimalSlice](orm.Relationship{
		Name: "Animal",
		Sides: []orm.RelSide{
			{
				From: "breeds",
				To:   TableNames.Animals,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Animals.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Breeds.AnimalID,
				},
				ToColumns: []string{
					ColumnNames.Animals.ID,
				},
			},
		},
	}, Animals.Columns().Names(), opts...)
}

func ThenLoadBreedAnimal(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBreedAnimal(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BreedAnimal", retrieved)
		}

		err := loader.LoadBreedAnimal(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBreedAnimal loads the breed's Animal into the .R struct
func (o *Breed) LoadBreedAnimal(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Animal = nil

	related, err := o.Animal(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Breeds = BreedSlice{o}

	o.R.Animal = related
	return nil
}

// LoadBreedAnimal loads the breed's Animal into the .R struct
func (os BreedSlice) LoadBreedAnimal(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	animals, err := os.Animal(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range animals {
			if o.AnimalID != rel.ID {
				continue
			}

			rel.R.Breeds = append(rel.R.Breeds, o)

			o.R.Animal = rel
			break
		}
	}

	return nil
}

func ThenLoadBreedPets(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBreedPets(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BreedPets", retrieved)
		}

		err := loader.LoadBreedPets(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBreedPets loads the breed's Pets into the .R struct
func (o *Breed) LoadBreedPets(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Pets = nil

	related, err := o.Pets(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Breed = o
	}

	o.R.Pets = related
	return nil
}

// LoadBreedPets loads the breed's Pets into the .R struct
func (os BreedSlice) LoadBreedPets(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pets, err := os.Pets(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Pets = nil
	}

	for _, o := range os {
		for _, rel := range pets {
			if o.ID != rel.BreedID {
				continue
			}

			rel.R.Breed = o

			o.R.Pets = append(o.R.Pets, rel)
		}
	}

	return nil
}

func attachBreedAnimal0(ctx context.Context, exec bob.Executor, count int, breed0 *Breed, animal1 *Animal) (*Breed, error) {
	setter := &BreedSetter{
		AnimalID: omit.From(animal1.ID),
	}

	err := Breeds.Update(ctx, exec, setter, breed0)
	if err != nil {
		return nil, fmt.Errorf("attachBreedAnimal0: %w", err)
	}

	return breed0, nil
}

func (breed0 *Breed) InsertAnimal(ctx context.Context, exec bob.Executor, related *AnimalSetter) error {
	animal1, err := Animals.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachBreedAnimal0(ctx, exec, 1, breed0, animal1)
	if err != nil {
		return err
	}

	breed0.R.Animal = animal1

	animal1.R.Breeds = append(animal1.R.Breeds, breed0)

	return nil
}

func (breed0 *Breed) AttachAnimal(ctx context.Context, exec bob.Executor, animal1 *Animal) error {
	var err error

	_, err = attachBreedAnimal0(ctx, exec, 1, breed0, animal1)
	if err != nil {
		return err
	}

	breed0.R.Animal = animal1

	animal1.R.Breeds = append(animal1.R.Breeds, breed0)

	return nil
}

func insertBreedPets0(ctx context.Context, exec bob.Executor, pets1 []*PetSetter, breed0 *Breed) (PetSlice, error) {
	for i := range pets1 {
		pets1[i].BreedID = omit.From(breed0.ID)
	}

	ret, err := Pets.InsertMany(ctx, exec, pets1...)
	if err != nil {
		return ret, fmt.Errorf("insertBreedPets0: %w", err)
	}

	return ret, nil
}

func attachBreedPets0(ctx context.Context, exec bob.Executor, count int, pets1 PetSlice, breed0 *Breed) (PetSlice, error) {
	setter := &PetSetter{
		BreedID: omit.From(breed0.ID),
	}

	err := Pets.Update(ctx, exec, setter, pets1...)
	if err != nil {
		return nil, fmt.Errorf("attachBreedPets0: %w", err)
	}

	return pets1, nil
}

func (breed0 *Breed) InsertPets(ctx context.Context, exec bob.Executor, related ...*PetSetter) error {
	if len(related) == 0 {
		return nil
	}

	pets1, err := insertBreedPets0(ctx, exec, related, breed0)
	if err != nil {
		return err
	}

	breed0.R.Pets = append(breed0.R.Pets, pets1...)

	for _, rel := range pets1 {
		rel.R.Breed = breed0
	}
	return nil
}

func (breed0 *Breed) AttachPets(ctx context.Context, exec bob.Executor, related ...*Pet) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	pets1 := PetSlice(related)

	_, err = attachBreedPets0(ctx, exec, len(related), pets1, breed0)
	if err != nil {
		return err
	}

	breed0.R.Pets = append(breed0.R.Pets, pets1...)

	for _, rel := range related {
		rel.R.Breed = breed0
	}

	return nil
}
