// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/im"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
)

// Specy is an object representing the database table.
type Specy struct {
	ID          uint8  `db:"id,pk,autoincr" `
	Description string `db:"description" `
}

// SpecySlice is an alias for a slice of pointers to Specy.
// This should almost always be used instead of []*Specy.
type SpecySlice []*Specy

// Species contains methods to work with the species table
var Species = mysql.NewTablex[*Specy, SpecySlice, *SpecySetter]("species", []string{"id"}, []string{"description"})

// SpeciesQuery is a query on the species table
type SpeciesQuery = *mysql.ViewQuery[*Specy, SpecySlice]

// SpeciesStmt is a prepared statment on species
type SpeciesStmt = bob.QueryStmt[*Specy, SpecySlice]

// SpecySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type SpecySetter struct {
	ID          omit.Val[uint8]  `db:"id,pk,autoincr" `
	Description omit.Val[string] `db:"description" `
}

func (s SpecySetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	return vals
}

func (s SpecySetter) Overwrite(t *Specy) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.Get()
	}
}

func (s SpecySetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 2)
	if s.ID.IsUnset() {
		vals[0] = mysql.Raw("DEFAULT")
	} else {
		vals[0] = mysql.Arg(s.ID)
	}

	if s.Description.IsUnset() {
		vals[1] = mysql.Raw("DEFAULT")
	} else {
		vals[1] = mysql.Arg(s.Description)
	}

	return im.Values(vals...)
}

func (s SpecySetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions("species")...).Apply(q)
}

func (s SpecySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "description")...),
			mysql.Arg(s.Description),
		}})
	}

	return exprs
}

type specyColumnNames struct {
	ID          string
	Description string
}

var SpecyColumns = buildSpecyColumns("species")

type specyColumns struct {
	tableAlias  string
	ID          mysql.Expression
	Description mysql.Expression
}

func (c specyColumns) Alias() string {
	return c.tableAlias
}

func (specyColumns) AliasedAs(alias string) specyColumns {
	return buildSpecyColumns(alias)
}

func buildSpecyColumns(alias string) specyColumns {
	return specyColumns{
		tableAlias:  alias,
		ID:          mysql.Quote(alias, "id"),
		Description: mysql.Quote(alias, "description"),
	}
}

type specyWhere[Q mysql.Filterable] struct {
	ID          mysql.WhereMod[Q, uint8]
	Description mysql.WhereMod[Q, string]
}

func (specyWhere[Q]) AliasedAs(alias string) specyWhere[Q] {
	return buildSpecyWhere[Q](buildSpecyColumns(alias))
}

func buildSpecyWhere[Q mysql.Filterable](cols specyColumns) specyWhere[Q] {
	return specyWhere[Q]{
		ID:          mysql.Where[Q, uint8](cols.ID),
		Description: mysql.Where[Q, string](cols.Description),
	}
}

// FindSpecy retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindSpecy(ctx context.Context, exec bob.Executor, IDPK uint8, cols ...string) (*Specy, error) {
	if len(cols) == 0 {
		return Species.Query(
			ctx, exec,
			SelectWhere.Species.ID.EQ(IDPK),
		).One()
	}

	return Species.Query(
		ctx, exec,
		SelectWhere.Species.ID.EQ(IDPK),
		sm.Columns(Species.Columns().Only(cols...)),
	).One()
}

// SpecyExists checks the presence of a single record by primary key
func SpecyExists(ctx context.Context, exec bob.Executor, IDPK uint8) (bool, error) {
	return Species.Query(
		ctx, exec,
		SelectWhere.Species.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Specy
func (o *Specy) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

// Update uses an executor to update the Specy
func (o *Specy) Update(ctx context.Context, exec bob.Executor, s *SpecySetter) error {
	return Species.Update(ctx, exec, s, o)
}

// Delete deletes a single Specy record with an executor
func (o *Specy) Delete(ctx context.Context, exec bob.Executor) error {
	return Species.Delete(ctx, exec, o)
}

// Reload refreshes the Specy using the executor
func (o *Specy) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Species.Query(
		ctx, exec,
		SelectWhere.Species.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o SpecySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals SpecySetter) error {
	return Species.Update(ctx, exec, &vals, o...)
}

func (o SpecySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Species.Delete(ctx, exec, o...)
}

func (o SpecySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uint8, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Species.ID.In(IDPK...),
	)

	o2, err := Species.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
