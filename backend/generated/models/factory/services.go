// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	models "backend/generated/models"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type ServiceMod interface {
	Apply(*ServiceTemplate)
}

type ServiceModFunc func(*ServiceTemplate)

func (f ServiceModFunc) Apply(n *ServiceTemplate) {
	f(n)
}

type ServiceModSlice []ServiceMod

func (mods ServiceModSlice) Apply(n *ServiceTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// ServiceTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ServiceTemplate struct {
	ID          func() uint32
	ClinicID    func() uint32
	Description func() string

	r serviceR
	f *Factory
}

type serviceR struct {
	Clinic *serviceRClinicR
}

type serviceRClinicR struct {
	o *ClinicTemplate
}

// Apply mods to the ServiceTemplate
func (o *ServiceTemplate) Apply(mods ...ServiceMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Service
// this does nothing with the relationship templates
func (o ServiceTemplate) toModel() *models.Service {
	m := &models.Service{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.ClinicID != nil {
		m.ClinicID = o.ClinicID()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}

	return m
}

// toModels returns an models.ServiceSlice
// this does nothing with the relationship templates
func (o ServiceTemplate) toModels(number int) models.ServiceSlice {
	m := make(models.ServiceSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Service
// according to the relationships in the template. Nothing is inserted into the db
func (t ServiceTemplate) setModelRels(o *models.Service) {
	if t.r.Clinic != nil {
		rel := t.r.Clinic.o.toModel()
		rel.R.Services = append(rel.R.Services, o)
		o.ClinicID = rel.ID
		o.R.Clinic = rel
	}
}

// BuildSetter returns an *models.ServiceSetter
// this does nothing with the relationship templates
func (o ServiceTemplate) BuildSetter() *models.ServiceSetter {
	m := &models.ServiceSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.ClinicID != nil {
		m.ClinicID = omit.From(o.ClinicID())
	}
	if o.Description != nil {
		m.Description = omit.From(o.Description())
	}

	return m
}

// BuildManySetter returns an []*models.ServiceSetter
// this does nothing with the relationship templates
func (o ServiceTemplate) BuildManySetter(number int) []*models.ServiceSetter {
	m := make([]*models.ServiceSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Service
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ServiceTemplate.Create
func (o ServiceTemplate) Build() *models.Service {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ServiceSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ServiceTemplate.CreateMany
func (o ServiceTemplate) BuildMany(number int) models.ServiceSlice {
	m := make(models.ServiceSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableService(m *models.ServiceSetter) {
	if m.ClinicID.IsUnset() {
		m.ClinicID = omit.From(random_uint32(nil))
	}
	if m.Description.IsUnset() {
		m.Description = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Service
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ServiceTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Service) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a service and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ServiceTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Service, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a service and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *ServiceTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Service {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a service and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *ServiceTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Service {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a service and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *ServiceTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Service, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableService(opt)

	var rel0 *models.Clinic
	if o.r.Clinic == nil {
		var ok bool
		rel0, ok = clinicCtx.Value(ctx)
		if !ok {
			ServiceMods.WithNewClinic().Apply(o)
		}
	}
	if o.r.Clinic != nil {
		ctx, rel0, err = o.r.Clinic.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.ClinicID = omit.From(rel0.ID)

	m, err := models.Services.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = serviceCtx.WithValue(ctx, m)

	m.R.Clinic = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple services and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ServiceTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ServiceSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple services and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o ServiceTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.ServiceSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple services and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o ServiceTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.ServiceSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple services and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o ServiceTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.ServiceSlice, error) {
	var err error
	m := make(models.ServiceSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Service has methods that act as mods for the ServiceTemplate
var ServiceMods serviceMods

type serviceMods struct{}

func (m serviceMods) RandomizeAllColumns(f *faker.Faker) ServiceMod {
	return ServiceModSlice{
		ServiceMods.RandomID(f),
		ServiceMods.RandomClinicID(f),
		ServiceMods.RandomDescription(f),
	}
}

// Set the model columns to this value
func (m serviceMods) ID(val uint32) ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.ID = func() uint32 { return val }
	})
}

// Set the Column from the function
func (m serviceMods) IDFunc(f func() uint32) ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m serviceMods) UnsetID() ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m serviceMods) RandomID(f *faker.Faker) ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.ID = func() uint32 {
			return random_uint32(f)
		}
	})
}

// Set the model columns to this value
func (m serviceMods) ClinicID(val uint32) ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.ClinicID = func() uint32 { return val }
	})
}

// Set the Column from the function
func (m serviceMods) ClinicIDFunc(f func() uint32) ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.ClinicID = f
	})
}

// Clear any values for the column
func (m serviceMods) UnsetClinicID() ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.ClinicID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m serviceMods) RandomClinicID(f *faker.Faker) ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.ClinicID = func() uint32 {
			return random_uint32(f)
		}
	})
}

// Set the model columns to this value
func (m serviceMods) Description(val string) ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.Description = func() string { return val }
	})
}

// Set the Column from the function
func (m serviceMods) DescriptionFunc(f func() string) ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m serviceMods) UnsetDescription() ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m serviceMods) RandomDescription(f *faker.Faker) ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.Description = func() string {
			return random_string(f)
		}
	})
}

func (m serviceMods) WithClinic(rel *ClinicTemplate) ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.r.Clinic = &serviceRClinicR{
			o: rel,
		}
	})
}

func (m serviceMods) WithNewClinic(mods ...ClinicMod) ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		related := o.f.NewClinic(mods...)

		m.WithClinic(related).Apply(o)
	})
}

func (m serviceMods) WithoutClinic() ServiceMod {
	return ServiceModFunc(func(o *ServiceTemplate) {
		o.r.Clinic = nil
	})
}
