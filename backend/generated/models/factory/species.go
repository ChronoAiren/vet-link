// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	models "backend/generated/models"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type SpecyMod interface {
	Apply(*SpecyTemplate)
}

type SpecyModFunc func(*SpecyTemplate)

func (f SpecyModFunc) Apply(n *SpecyTemplate) {
	f(n)
}

type SpecyModSlice []SpecyMod

func (mods SpecyModSlice) Apply(n *SpecyTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// SpecyTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type SpecyTemplate struct {
	ID          func() uint8
	Description func() string

	f *Factory
}

// Apply mods to the SpecyTemplate
func (o *SpecyTemplate) Apply(mods ...SpecyMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Specy
// this does nothing with the relationship templates
func (o SpecyTemplate) toModel() *models.Specy {
	m := &models.Specy{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Description != nil {
		m.Description = o.Description()
	}

	return m
}

// toModels returns an models.SpecySlice
// this does nothing with the relationship templates
func (o SpecyTemplate) toModels(number int) models.SpecySlice {
	m := make(models.SpecySlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Specy
// according to the relationships in the template. Nothing is inserted into the db
func (t SpecyTemplate) setModelRels(o *models.Specy) {}

// BuildSetter returns an *models.SpecySetter
// this does nothing with the relationship templates
func (o SpecyTemplate) BuildSetter() *models.SpecySetter {
	m := &models.SpecySetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Description != nil {
		m.Description = omit.From(o.Description())
	}

	return m
}

// BuildManySetter returns an []*models.SpecySetter
// this does nothing with the relationship templates
func (o SpecyTemplate) BuildManySetter(number int) []*models.SpecySetter {
	m := make([]*models.SpecySetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Specy
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SpecyTemplate.Create
func (o SpecyTemplate) Build() *models.Specy {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.SpecySlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use SpecyTemplate.CreateMany
func (o SpecyTemplate) BuildMany(number int) models.SpecySlice {
	m := make(models.SpecySlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableSpecy(m *models.SpecySetter) {
	if m.Description.IsUnset() {
		m.Description = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Specy
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *SpecyTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Specy) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a specy and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *SpecyTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Specy, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a specy and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *SpecyTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Specy {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a specy and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *SpecyTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Specy {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a specy and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *SpecyTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Specy, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableSpecy(opt)

	m, err := models.Species.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = specyCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple species and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o SpecyTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.SpecySlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple species and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o SpecyTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.SpecySlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple species and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o SpecyTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.SpecySlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple species and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o SpecyTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.SpecySlice, error) {
	var err error
	m := make(models.SpecySlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Specy has methods that act as mods for the SpecyTemplate
var SpecyMods specyMods

type specyMods struct{}

func (m specyMods) RandomizeAllColumns(f *faker.Faker) SpecyMod {
	return SpecyModSlice{
		SpecyMods.RandomID(f),
		SpecyMods.RandomDescription(f),
	}
}

// Set the model columns to this value
func (m specyMods) ID(val uint8) SpecyMod {
	return SpecyModFunc(func(o *SpecyTemplate) {
		o.ID = func() uint8 { return val }
	})
}

// Set the Column from the function
func (m specyMods) IDFunc(f func() uint8) SpecyMod {
	return SpecyModFunc(func(o *SpecyTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m specyMods) UnsetID() SpecyMod {
	return SpecyModFunc(func(o *SpecyTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m specyMods) RandomID(f *faker.Faker) SpecyMod {
	return SpecyModFunc(func(o *SpecyTemplate) {
		o.ID = func() uint8 {
			return random_uint8(f)
		}
	})
}

// Set the model columns to this value
func (m specyMods) Description(val string) SpecyMod {
	return SpecyModFunc(func(o *SpecyTemplate) {
		o.Description = func() string { return val }
	})
}

// Set the Column from the function
func (m specyMods) DescriptionFunc(f func() string) SpecyMod {
	return SpecyModFunc(func(o *SpecyTemplate) {
		o.Description = f
	})
}

// Clear any values for the column
func (m specyMods) UnsetDescription() SpecyMod {
	return SpecyModFunc(func(o *SpecyTemplate) {
		o.Description = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m specyMods) RandomDescription(f *faker.Faker) SpecyMod {
	return SpecyModFunc(func(o *SpecyTemplate) {
		o.Description = func() string {
			return random_string(f)
		}
	})
}
