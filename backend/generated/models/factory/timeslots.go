// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "backend/generated/models"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type TimeslotMod interface {
	Apply(*TimeslotTemplate)
}

type TimeslotModFunc func(*TimeslotTemplate)

func (f TimeslotModFunc) Apply(n *TimeslotTemplate) {
	f(n)
}

type TimeslotModSlice []TimeslotMod

func (mods TimeslotModSlice) Apply(n *TimeslotTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// TimeslotTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TimeslotTemplate struct {
	ID        func() uint32
	VetID     func() uint32
	StartTime func() time.Time

	r timeslotR
	f *Factory
}

type timeslotR struct {
	VetUser *timeslotRVetUserR
}

type timeslotRVetUserR struct {
	o *UserTemplate
}

// Apply mods to the TimeslotTemplate
func (o *TimeslotTemplate) Apply(mods ...TimeslotMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Timeslot
// this does nothing with the relationship templates
func (o TimeslotTemplate) toModel() *models.Timeslot {
	m := &models.Timeslot{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.VetID != nil {
		m.VetID = o.VetID()
	}
	if o.StartTime != nil {
		m.StartTime = o.StartTime()
	}

	return m
}

// toModels returns an models.TimeslotSlice
// this does nothing with the relationship templates
func (o TimeslotTemplate) toModels(number int) models.TimeslotSlice {
	m := make(models.TimeslotSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Timeslot
// according to the relationships in the template. Nothing is inserted into the db
func (t TimeslotTemplate) setModelRels(o *models.Timeslot) {
	if t.r.VetUser != nil {
		rel := t.r.VetUser.o.toModel()
		rel.R.VetTimeslots = append(rel.R.VetTimeslots, o)
		o.VetID = rel.ID
		o.R.VetUser = rel
	}
}

// BuildSetter returns an *models.TimeslotSetter
// this does nothing with the relationship templates
func (o TimeslotTemplate) BuildSetter() *models.TimeslotSetter {
	m := &models.TimeslotSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.VetID != nil {
		m.VetID = omit.From(o.VetID())
	}
	if o.StartTime != nil {
		m.StartTime = omit.From(o.StartTime())
	}

	return m
}

// BuildManySetter returns an []*models.TimeslotSetter
// this does nothing with the relationship templates
func (o TimeslotTemplate) BuildManySetter(number int) []*models.TimeslotSetter {
	m := make([]*models.TimeslotSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Timeslot
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TimeslotTemplate.Create
func (o TimeslotTemplate) Build() *models.Timeslot {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TimeslotSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TimeslotTemplate.CreateMany
func (o TimeslotTemplate) BuildMany(number int) models.TimeslotSlice {
	m := make(models.TimeslotSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTimeslot(m *models.TimeslotSetter) {
	if m.VetID.IsUnset() {
		m.VetID = omit.From(random_uint32(nil))
	}
	if m.StartTime.IsUnset() {
		m.StartTime = omit.From(random_time_Time(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Timeslot
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TimeslotTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Timeslot) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a timeslot and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TimeslotTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Timeslot, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a timeslot and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *TimeslotTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Timeslot {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a timeslot and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *TimeslotTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Timeslot {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a timeslot and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TimeslotTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Timeslot, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTimeslot(opt)

	var rel0 *models.User
	if o.r.VetUser == nil {
		var ok bool
		rel0, ok = userCtx.Value(ctx)
		if !ok {
			TimeslotMods.WithNewVetUser().Apply(o)
		}
	}
	if o.r.VetUser != nil {
		ctx, rel0, err = o.r.VetUser.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.VetID = omit.From(rel0.ID)

	m, err := models.Timeslots.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = timeslotCtx.WithValue(ctx, m)

	m.R.VetUser = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple timeslots and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TimeslotTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TimeslotSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple timeslots and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o TimeslotTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.TimeslotSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple timeslots and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o TimeslotTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.TimeslotSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple timeslots and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TimeslotTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TimeslotSlice, error) {
	var err error
	m := make(models.TimeslotSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Timeslot has methods that act as mods for the TimeslotTemplate
var TimeslotMods timeslotMods

type timeslotMods struct{}

func (m timeslotMods) RandomizeAllColumns(f *faker.Faker) TimeslotMod {
	return TimeslotModSlice{
		TimeslotMods.RandomID(f),
		TimeslotMods.RandomVetID(f),
		TimeslotMods.RandomStartTime(f),
	}
}

// Set the model columns to this value
func (m timeslotMods) ID(val uint32) TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.ID = func() uint32 { return val }
	})
}

// Set the Column from the function
func (m timeslotMods) IDFunc(f func() uint32) TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m timeslotMods) UnsetID() TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m timeslotMods) RandomID(f *faker.Faker) TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.ID = func() uint32 {
			return random_uint32(f)
		}
	})
}

// Set the model columns to this value
func (m timeslotMods) VetID(val uint32) TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.VetID = func() uint32 { return val }
	})
}

// Set the Column from the function
func (m timeslotMods) VetIDFunc(f func() uint32) TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.VetID = f
	})
}

// Clear any values for the column
func (m timeslotMods) UnsetVetID() TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.VetID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m timeslotMods) RandomVetID(f *faker.Faker) TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.VetID = func() uint32 {
			return random_uint32(f)
		}
	})
}

// Set the model columns to this value
func (m timeslotMods) StartTime(val time.Time) TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.StartTime = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m timeslotMods) StartTimeFunc(f func() time.Time) TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.StartTime = f
	})
}

// Clear any values for the column
func (m timeslotMods) UnsetStartTime() TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.StartTime = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m timeslotMods) RandomStartTime(f *faker.Faker) TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.StartTime = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m timeslotMods) WithVetUser(rel *UserTemplate) TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.r.VetUser = &timeslotRVetUserR{
			o: rel,
		}
	})
}

func (m timeslotMods) WithNewVetUser(mods ...UserMod) TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		related := o.f.NewUser(mods...)

		m.WithVetUser(related).Apply(o)
	})
}

func (m timeslotMods) WithoutVetUser() TimeslotMod {
	return TimeslotModFunc(func(o *TimeslotTemplate) {
		o.r.VetUser = nil
	})
}
