// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	models "backend/generated/models"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type EmployeeMod interface {
	Apply(*EmployeeTemplate)
}

type EmployeeModFunc func(*EmployeeTemplate)

func (f EmployeeModFunc) Apply(n *EmployeeTemplate) {
	f(n)
}

type EmployeeModSlice []EmployeeMod

func (mods EmployeeModSlice) Apply(n *EmployeeTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// EmployeeTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type EmployeeTemplate struct {
	ID       func() uint32
	UserID   func() uint32
	ClinicID func() uint32

	r employeeR
	f *Factory
}

type employeeR struct {
	Clinic *employeeRClinicR
	User   *employeeRUserR
}

type employeeRClinicR struct {
	o *ClinicTemplate
}
type employeeRUserR struct {
	o *UserTemplate
}

// Apply mods to the EmployeeTemplate
func (o *EmployeeTemplate) Apply(mods ...EmployeeMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Employee
// this does nothing with the relationship templates
func (o EmployeeTemplate) toModel() *models.Employee {
	m := &models.Employee{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.ClinicID != nil {
		m.ClinicID = o.ClinicID()
	}

	return m
}

// toModels returns an models.EmployeeSlice
// this does nothing with the relationship templates
func (o EmployeeTemplate) toModels(number int) models.EmployeeSlice {
	m := make(models.EmployeeSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Employee
// according to the relationships in the template. Nothing is inserted into the db
func (t EmployeeTemplate) setModelRels(o *models.Employee) {
	if t.r.Clinic != nil {
		rel := t.r.Clinic.o.toModel()
		rel.R.Employees = append(rel.R.Employees, o)
		o.ClinicID = rel.ID
		o.R.Clinic = rel
	}

	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.Employees = append(rel.R.Employees, o)
		o.UserID = rel.ID
		o.R.User = rel
	}
}

// BuildSetter returns an *models.EmployeeSetter
// this does nothing with the relationship templates
func (o EmployeeTemplate) BuildSetter() *models.EmployeeSetter {
	m := &models.EmployeeSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.ClinicID != nil {
		m.ClinicID = omit.From(o.ClinicID())
	}

	return m
}

// BuildManySetter returns an []*models.EmployeeSetter
// this does nothing with the relationship templates
func (o EmployeeTemplate) BuildManySetter(number int) []*models.EmployeeSetter {
	m := make([]*models.EmployeeSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Employee
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use EmployeeTemplate.Create
func (o EmployeeTemplate) Build() *models.Employee {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.EmployeeSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use EmployeeTemplate.CreateMany
func (o EmployeeTemplate) BuildMany(number int) models.EmployeeSlice {
	m := make(models.EmployeeSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableEmployee(m *models.EmployeeSetter) {
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random_uint32(nil))
	}
	if m.ClinicID.IsUnset() {
		m.ClinicID = omit.From(random_uint32(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Employee
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *EmployeeTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Employee) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a employee and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *EmployeeTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Employee, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a employee and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *EmployeeTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Employee {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a employee and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *EmployeeTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Employee {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a employee and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *EmployeeTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Employee, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableEmployee(opt)

	var rel0 *models.Clinic
	if o.r.Clinic == nil {
		var ok bool
		rel0, ok = clinicCtx.Value(ctx)
		if !ok {
			EmployeeMods.WithNewClinic().Apply(o)
		}
	}
	if o.r.Clinic != nil {
		ctx, rel0, err = o.r.Clinic.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.ClinicID = omit.From(rel0.ID)

	var rel1 *models.User
	if o.r.User == nil {
		var ok bool
		rel1, ok = userCtx.Value(ctx)
		if !ok {
			EmployeeMods.WithNewUser().Apply(o)
		}
	}
	if o.r.User != nil {
		ctx, rel1, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.UserID = omit.From(rel1.ID)

	m, err := models.Employees.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = employeeCtx.WithValue(ctx, m)

	m.R.Clinic = rel0
	m.R.User = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple employees and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o EmployeeTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.EmployeeSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple employees and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o EmployeeTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.EmployeeSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple employees and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o EmployeeTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.EmployeeSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple employees and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o EmployeeTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.EmployeeSlice, error) {
	var err error
	m := make(models.EmployeeSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Employee has methods that act as mods for the EmployeeTemplate
var EmployeeMods employeeMods

type employeeMods struct{}

func (m employeeMods) RandomizeAllColumns(f *faker.Faker) EmployeeMod {
	return EmployeeModSlice{
		EmployeeMods.RandomID(f),
		EmployeeMods.RandomUserID(f),
		EmployeeMods.RandomClinicID(f),
	}
}

// Set the model columns to this value
func (m employeeMods) ID(val uint32) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.ID = func() uint32 { return val }
	})
}

// Set the Column from the function
func (m employeeMods) IDFunc(f func() uint32) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m employeeMods) UnsetID() EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m employeeMods) RandomID(f *faker.Faker) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.ID = func() uint32 {
			return random_uint32(f)
		}
	})
}

// Set the model columns to this value
func (m employeeMods) UserID(val uint32) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.UserID = func() uint32 { return val }
	})
}

// Set the Column from the function
func (m employeeMods) UserIDFunc(f func() uint32) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m employeeMods) UnsetUserID() EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m employeeMods) RandomUserID(f *faker.Faker) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.UserID = func() uint32 {
			return random_uint32(f)
		}
	})
}

// Set the model columns to this value
func (m employeeMods) ClinicID(val uint32) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.ClinicID = func() uint32 { return val }
	})
}

// Set the Column from the function
func (m employeeMods) ClinicIDFunc(f func() uint32) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.ClinicID = f
	})
}

// Clear any values for the column
func (m employeeMods) UnsetClinicID() EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.ClinicID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m employeeMods) RandomClinicID(f *faker.Faker) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.ClinicID = func() uint32 {
			return random_uint32(f)
		}
	})
}

func (m employeeMods) WithClinic(rel *ClinicTemplate) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.r.Clinic = &employeeRClinicR{
			o: rel,
		}
	})
}

func (m employeeMods) WithNewClinic(mods ...ClinicMod) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		related := o.f.NewClinic(mods...)

		m.WithClinic(related).Apply(o)
	})
}

func (m employeeMods) WithoutClinic() EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.r.Clinic = nil
	})
}

func (m employeeMods) WithUser(rel *UserTemplate) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.r.User = &employeeRUserR{
			o: rel,
		}
	})
}

func (m employeeMods) WithNewUser(mods ...UserMod) EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m employeeMods) WithoutUser() EmployeeMod {
	return EmployeeModFunc(func(o *EmployeeTemplate) {
		o.r.User = nil
	})
}
