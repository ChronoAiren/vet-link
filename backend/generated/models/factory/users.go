// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	models "backend/generated/models"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type UserMod interface {
	Apply(*UserTemplate)
}

type UserModFunc func(*UserTemplate)

func (f UserModFunc) Apply(n *UserTemplate) {
	f(n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(n *UserTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	ID         func() uint32
	GivenName  func() string
	FamilyName func() string
	Email      func() string
	Password   func() string
	RoleID     func() uint8

	r userR
	f *Factory
}

type userR struct {
	Employees []*userREmployeesR
	OwnerPets []*userROwnerPetsR
	Clinics   []*userRClinicsR
	Role      *userRRoleR
}

type userREmployeesR struct {
	number int
	o      *EmployeeTemplate
}
type userROwnerPetsR struct {
	number int
	o      *PetTemplate
}
type userRClinicsR struct {
	number int
	o      *ClinicTemplate
}
type userRRoleR struct {
	o *RoleTemplate
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.User
// this does nothing with the relationship templates
func (o UserTemplate) toModel() *models.User {
	m := &models.User{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.GivenName != nil {
		m.GivenName = o.GivenName()
	}
	if o.FamilyName != nil {
		m.FamilyName = o.FamilyName()
	}
	if o.Email != nil {
		m.Email = o.Email()
	}
	if o.Password != nil {
		m.Password = o.Password()
	}
	if o.RoleID != nil {
		m.RoleID = o.RoleID()
	}

	return m
}

// toModels returns an models.UserSlice
// this does nothing with the relationship templates
func (o UserTemplate) toModels(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {
	if t.r.Employees != nil {
		rel := models.EmployeeSlice{}
		for _, r := range t.r.Employees {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = o.ID
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.Employees = rel
	}

	if t.r.OwnerPets != nil {
		rel := models.PetSlice{}
		for _, r := range t.r.OwnerPets {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.OwnerID = o.ID
				rel.R.OwnerUser = o
			}
			rel = append(rel, related...)
		}
		o.R.OwnerPets = rel
	}

	if t.r.Clinics != nil {
		rel := models.ClinicSlice{}
		for _, r := range t.r.Clinics {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.UserID = o.ID
				rel.R.User = o
			}
			rel = append(rel, related...)
		}
		o.R.Clinics = rel
	}

	if t.r.Role != nil {
		rel := t.r.Role.o.toModel()
		rel.R.Users = append(rel.R.Users, o)
		o.RoleID = rel.ID
		o.R.Role = rel
	}
}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.GivenName != nil {
		m.GivenName = omit.From(o.GivenName())
	}
	if o.FamilyName != nil {
		m.FamilyName = omit.From(o.FamilyName())
	}
	if o.Email != nil {
		m.Email = omit.From(o.Email())
	}
	if o.Password != nil {
		m.Password = omit.From(o.Password())
	}
	if o.RoleID != nil {
		m.RoleID = omit.From(o.RoleID())
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
	if m.GivenName.IsUnset() {
		m.GivenName = omit.From(random_string(nil))
	}
	if m.FamilyName.IsUnset() {
		m.FamilyName = omit.From(random_string(nil))
	}
	if m.Email.IsUnset() {
		m.Email = omit.From(random_string(nil))
	}
	if m.Password.IsUnset() {
		m.Password = omit.From(random_string(nil))
	}
	if m.RoleID.IsUnset() {
		m.RoleID = omit.From(random_uint8(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) (context.Context, error) {
	var err error

	if o.r.Employees != nil {
		for _, r := range o.r.Employees {
			var rel0 models.EmployeeSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachEmployees(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.OwnerPets != nil {
		for _, r := range o.r.OwnerPets {
			var rel1 models.PetSlice
			ctx, rel1, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachOwnerPets(ctx, exec, rel1...)
			if err != nil {
				return ctx, err
			}
		}
	}

	if o.r.Clinics != nil {
		for _, r := range o.r.Clinics {
			var rel2 models.ClinicSlice
			ctx, rel2, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachClinics(ctx, exec, rel2...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *UserTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.User {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *UserTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.User {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	var rel3 *models.Role
	if o.r.Role == nil {
		var ok bool
		rel3, ok = roleCtx.Value(ctx)
		if !ok {
			UserMods.WithNewRole().Apply(o)
		}
	}
	if o.r.Role != nil {
		ctx, rel3, err = o.r.Role.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.RoleID = omit.From(rel3.ID)

	m, err := models.Users.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userCtx.WithValue(ctx, m)

	m.R.Role = rel3

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o UserTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.UserSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o UserTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.UserSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomID(f),
		UserMods.RandomGivenName(f),
		UserMods.RandomFamilyName(f),
		UserMods.RandomEmail(f),
		UserMods.RandomPassword(f),
		UserMods.RandomRoleID(f),
	}
}

// Set the model columns to this value
func (m userMods) ID(val uint32) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = func() uint32 { return val }
	})
}

// Set the Column from the function
func (m userMods) IDFunc(f func() uint32) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetID() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomID(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.ID = func() uint32 {
			return random_uint32(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) GivenName(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.GivenName = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) GivenNameFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.GivenName = f
	})
}

// Clear any values for the column
func (m userMods) UnsetGivenName() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.GivenName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomGivenName(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.GivenName = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) FamilyName(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.FamilyName = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) FamilyNameFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.FamilyName = f
	})
}

// Clear any values for the column
func (m userMods) UnsetFamilyName() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.FamilyName = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomFamilyName(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.FamilyName = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Email(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) EmailFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = f
	})
}

// Clear any values for the column
func (m userMods) UnsetEmail() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomEmail(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Email = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Password(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Password = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) PasswordFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Password = f
	})
}

// Clear any values for the column
func (m userMods) UnsetPassword() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Password = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomPassword(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Password = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m userMods) RoleID(val uint8) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.RoleID = func() uint8 { return val }
	})
}

// Set the Column from the function
func (m userMods) RoleIDFunc(f func() uint8) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.RoleID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetRoleID() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.RoleID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomRoleID(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.RoleID = func() uint8 {
			return random_uint8(f)
		}
	})
}

func (m userMods) WithRole(rel *RoleTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Role = &userRRoleR{
			o: rel,
		}
	})
}

func (m userMods) WithNewRole(mods ...RoleMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewRole(mods...)

		m.WithRole(related).Apply(o)
	})
}

func (m userMods) WithoutRole() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Role = nil
	})
}

func (m userMods) WithEmployees(number int, related *EmployeeTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Employees = []*userREmployeesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewEmployees(number int, mods ...EmployeeMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewEmployee(mods...)
		m.WithEmployees(number, related).Apply(o)
	})
}

func (m userMods) AddEmployees(number int, related *EmployeeTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Employees = append(o.r.Employees, &userREmployeesR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewEmployees(number int, mods ...EmployeeMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewEmployee(mods...)
		m.AddEmployees(number, related).Apply(o)
	})
}

func (m userMods) WithoutEmployees() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Employees = nil
	})
}

func (m userMods) WithOwnerPets(number int, related *PetTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.OwnerPets = []*userROwnerPetsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewOwnerPets(number int, mods ...PetMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewPet(mods...)
		m.WithOwnerPets(number, related).Apply(o)
	})
}

func (m userMods) AddOwnerPets(number int, related *PetTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.OwnerPets = append(o.r.OwnerPets, &userROwnerPetsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewOwnerPets(number int, mods ...PetMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewPet(mods...)
		m.AddOwnerPets(number, related).Apply(o)
	})
}

func (m userMods) WithoutOwnerPets() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.OwnerPets = nil
	})
}

func (m userMods) WithClinics(number int, related *ClinicTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Clinics = []*userRClinicsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m userMods) WithNewClinics(number int, mods ...ClinicMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewClinic(mods...)
		m.WithClinics(number, related).Apply(o)
	})
}

func (m userMods) AddClinics(number int, related *ClinicTemplate) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Clinics = append(o.r.Clinics, &userRClinicsR{
			number: number,
			o:      related,
		})
	})
}

func (m userMods) AddNewClinics(number int, mods ...ClinicMod) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		related := o.f.NewClinic(mods...)
		m.AddClinics(number, related).Apply(o)
	})
}

func (m userMods) WithoutClinics() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.r.Clinics = nil
	})
}
