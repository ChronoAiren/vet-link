// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"

	models "backend/generated/models"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type ClinicMod interface {
	Apply(*ClinicTemplate)
}

type ClinicModFunc func(*ClinicTemplate)

func (f ClinicModFunc) Apply(n *ClinicTemplate) {
	f(n)
}

type ClinicModSlice []ClinicMod

func (mods ClinicModSlice) Apply(n *ClinicTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// ClinicTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type ClinicTemplate struct {
	ID         func() uint32
	UserID     func() uint32
	Name       func() string
	Location   func() string
	BusinessNo func() string

	r clinicR
	f *Factory
}

type clinicR struct {
	Employees []*clinicREmployeesR
	User      *clinicRUserR
}

type clinicREmployeesR struct {
	number int
	o      *EmployeeTemplate
}
type clinicRUserR struct {
	o *UserTemplate
}

// Apply mods to the ClinicTemplate
func (o *ClinicTemplate) Apply(mods ...ClinicMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Clinic
// this does nothing with the relationship templates
func (o ClinicTemplate) toModel() *models.Clinic {
	m := &models.Clinic{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Location != nil {
		m.Location = o.Location()
	}
	if o.BusinessNo != nil {
		m.BusinessNo = o.BusinessNo()
	}

	return m
}

// toModels returns an models.ClinicSlice
// this does nothing with the relationship templates
func (o ClinicTemplate) toModels(number int) models.ClinicSlice {
	m := make(models.ClinicSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Clinic
// according to the relationships in the template. Nothing is inserted into the db
func (t ClinicTemplate) setModelRels(o *models.Clinic) {
	if t.r.Employees != nil {
		rel := models.EmployeeSlice{}
		for _, r := range t.r.Employees {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.ClinicID = o.ID
				rel.R.Clinic = o
			}
			rel = append(rel, related...)
		}
		o.R.Employees = rel
	}

	if t.r.User != nil {
		rel := t.r.User.o.toModel()
		rel.R.Clinics = append(rel.R.Clinics, o)
		o.UserID = rel.ID
		o.R.User = rel
	}
}

// BuildSetter returns an *models.ClinicSetter
// this does nothing with the relationship templates
func (o ClinicTemplate) BuildSetter() *models.ClinicSetter {
	m := &models.ClinicSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Location != nil {
		m.Location = omit.From(o.Location())
	}
	if o.BusinessNo != nil {
		m.BusinessNo = omit.From(o.BusinessNo())
	}

	return m
}

// BuildManySetter returns an []*models.ClinicSetter
// this does nothing with the relationship templates
func (o ClinicTemplate) BuildManySetter(number int) []*models.ClinicSetter {
	m := make([]*models.ClinicSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Clinic
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ClinicTemplate.Create
func (o ClinicTemplate) Build() *models.Clinic {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.ClinicSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use ClinicTemplate.CreateMany
func (o ClinicTemplate) BuildMany(number int) models.ClinicSlice {
	m := make(models.ClinicSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableClinic(m *models.ClinicSetter) {
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random_uint32(nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random_string(nil))
	}
	if m.Location.IsUnset() {
		m.Location = omit.From(random_string(nil))
	}
	if m.BusinessNo.IsUnset() {
		m.BusinessNo = omit.From(random_string(nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Clinic
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *ClinicTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Clinic) (context.Context, error) {
	var err error

	if o.r.Employees != nil {
		for _, r := range o.r.Employees {
			var rel0 models.EmployeeSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachEmployees(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a clinic and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *ClinicTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Clinic, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// MustCreate builds a clinic and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *ClinicTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Clinic {
	_, m, err := o.create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a clinic and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *ClinicTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Clinic {
	tb.Helper()
	_, m, err := o.create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// create builds a clinic and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *ClinicTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Clinic, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableClinic(opt)

	var rel1 *models.User
	if o.r.User == nil {
		var ok bool
		rel1, ok = userCtx.Value(ctx)
		if !ok {
			ClinicMods.WithNewUser().Apply(o)
		}
	}
	if o.r.User != nil {
		ctx, rel1, err = o.r.User.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.UserID = omit.From(rel1.ID)

	m, err := models.Clinics.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = clinicCtx.WithValue(ctx, m)

	m.R.User = rel1

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple clinics and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o ClinicTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.ClinicSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// MustCreateMany builds multiple clinics and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o ClinicTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.ClinicSlice {
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple clinics and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o ClinicTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.ClinicSlice {
	tb.Helper()
	_, m, err := o.createMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// createMany builds multiple clinics and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o ClinicTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.ClinicSlice, error) {
	var err error
	m := make(models.ClinicSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Clinic has methods that act as mods for the ClinicTemplate
var ClinicMods clinicMods

type clinicMods struct{}

func (m clinicMods) RandomizeAllColumns(f *faker.Faker) ClinicMod {
	return ClinicModSlice{
		ClinicMods.RandomID(f),
		ClinicMods.RandomUserID(f),
		ClinicMods.RandomName(f),
		ClinicMods.RandomLocation(f),
		ClinicMods.RandomBusinessNo(f),
	}
}

// Set the model columns to this value
func (m clinicMods) ID(val uint32) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.ID = func() uint32 { return val }
	})
}

// Set the Column from the function
func (m clinicMods) IDFunc(f func() uint32) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m clinicMods) UnsetID() ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m clinicMods) RandomID(f *faker.Faker) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.ID = func() uint32 {
			return random_uint32(f)
		}
	})
}

// Set the model columns to this value
func (m clinicMods) UserID(val uint32) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.UserID = func() uint32 { return val }
	})
}

// Set the Column from the function
func (m clinicMods) UserIDFunc(f func() uint32) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m clinicMods) UnsetUserID() ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m clinicMods) RandomUserID(f *faker.Faker) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.UserID = func() uint32 {
			return random_uint32(f)
		}
	})
}

// Set the model columns to this value
func (m clinicMods) Name(val string) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m clinicMods) NameFunc(f func() string) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m clinicMods) UnsetName() ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m clinicMods) RandomName(f *faker.Faker) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.Name = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m clinicMods) Location(val string) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.Location = func() string { return val }
	})
}

// Set the Column from the function
func (m clinicMods) LocationFunc(f func() string) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.Location = f
	})
}

// Clear any values for the column
func (m clinicMods) UnsetLocation() ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.Location = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m clinicMods) RandomLocation(f *faker.Faker) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.Location = func() string {
			return random_string(f)
		}
	})
}

// Set the model columns to this value
func (m clinicMods) BusinessNo(val string) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.BusinessNo = func() string { return val }
	})
}

// Set the Column from the function
func (m clinicMods) BusinessNoFunc(f func() string) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.BusinessNo = f
	})
}

// Clear any values for the column
func (m clinicMods) UnsetBusinessNo() ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.BusinessNo = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m clinicMods) RandomBusinessNo(f *faker.Faker) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.BusinessNo = func() string {
			return random_string(f)
		}
	})
}

func (m clinicMods) WithUser(rel *UserTemplate) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.r.User = &clinicRUserR{
			o: rel,
		}
	})
}

func (m clinicMods) WithNewUser(mods ...UserMod) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		related := o.f.NewUser(mods...)

		m.WithUser(related).Apply(o)
	})
}

func (m clinicMods) WithoutUser() ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.r.User = nil
	})
}

func (m clinicMods) WithEmployees(number int, related *EmployeeTemplate) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.r.Employees = []*clinicREmployeesR{{
			number: number,
			o:      related,
		}}
	})
}

func (m clinicMods) WithNewEmployees(number int, mods ...EmployeeMod) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		related := o.f.NewEmployee(mods...)
		m.WithEmployees(number, related).Apply(o)
	})
}

func (m clinicMods) AddEmployees(number int, related *EmployeeTemplate) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.r.Employees = append(o.r.Employees, &clinicREmployeesR{
			number: number,
			o:      related,
		})
	})
}

func (m clinicMods) AddNewEmployees(number int, mods ...EmployeeMod) ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		related := o.f.NewEmployee(mods...)
		m.AddEmployees(number, related).Apply(o)
	})
}

func (m clinicMods) WithoutEmployees() ClinicMod {
	return ClinicModFunc(func(o *ClinicTemplate) {
		o.r.Employees = nil
	})
}
