// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

type Factory struct {
	baseAnimalMods   AnimalModSlice
	baseBreedMods    BreedModSlice
	baseClinicMods   ClinicModSlice
	baseEmployeeMods EmployeeModSlice
	basePetMods      PetModSlice
	baseRoleMods     RoleModSlice
	baseServiceMods  ServiceModSlice
	baseTimeslotMods TimeslotModSlice
	baseUserMods     UserModSlice
}

func New() *Factory {
	return &Factory{}
}

func (f *Factory) NewAnimal(mods ...AnimalMod) *AnimalTemplate {
	o := &AnimalTemplate{f: f}

	if f != nil {
		f.baseAnimalMods.Apply(o)
	}

	AnimalModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewBreed(mods ...BreedMod) *BreedTemplate {
	o := &BreedTemplate{f: f}

	if f != nil {
		f.baseBreedMods.Apply(o)
	}

	BreedModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewClinic(mods ...ClinicMod) *ClinicTemplate {
	o := &ClinicTemplate{f: f}

	if f != nil {
		f.baseClinicMods.Apply(o)
	}

	ClinicModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewEmployee(mods ...EmployeeMod) *EmployeeTemplate {
	o := &EmployeeTemplate{f: f}

	if f != nil {
		f.baseEmployeeMods.Apply(o)
	}

	EmployeeModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewPet(mods ...PetMod) *PetTemplate {
	o := &PetTemplate{f: f}

	if f != nil {
		f.basePetMods.Apply(o)
	}

	PetModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewRole(mods ...RoleMod) *RoleTemplate {
	o := &RoleTemplate{f: f}

	if f != nil {
		f.baseRoleMods.Apply(o)
	}

	RoleModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewService(mods ...ServiceMod) *ServiceTemplate {
	o := &ServiceTemplate{f: f}

	if f != nil {
		f.baseServiceMods.Apply(o)
	}

	ServiceModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewTimeslot(mods ...TimeslotMod) *TimeslotTemplate {
	o := &TimeslotTemplate{f: f}

	if f != nil {
		f.baseTimeslotMods.Apply(o)
	}

	TimeslotModSlice(mods).Apply(o)

	return o
}

func (f *Factory) NewUser(mods ...UserMod) *UserTemplate {
	o := &UserTemplate{f: f}

	if f != nil {
		f.baseUserMods.Apply(o)
	}

	UserModSlice(mods).Apply(o)

	return o
}

func (f *Factory) ClearBaseAnimalMods() {
	f.baseAnimalMods = nil
}

func (f *Factory) AddBaseAnimalMod(mods ...AnimalMod) {
	f.baseAnimalMods = append(f.baseAnimalMods, mods...)
}

func (f *Factory) ClearBaseBreedMods() {
	f.baseBreedMods = nil
}

func (f *Factory) AddBaseBreedMod(mods ...BreedMod) {
	f.baseBreedMods = append(f.baseBreedMods, mods...)
}

func (f *Factory) ClearBaseClinicMods() {
	f.baseClinicMods = nil
}

func (f *Factory) AddBaseClinicMod(mods ...ClinicMod) {
	f.baseClinicMods = append(f.baseClinicMods, mods...)
}

func (f *Factory) ClearBaseEmployeeMods() {
	f.baseEmployeeMods = nil
}

func (f *Factory) AddBaseEmployeeMod(mods ...EmployeeMod) {
	f.baseEmployeeMods = append(f.baseEmployeeMods, mods...)
}

func (f *Factory) ClearBasePetMods() {
	f.basePetMods = nil
}

func (f *Factory) AddBasePetMod(mods ...PetMod) {
	f.basePetMods = append(f.basePetMods, mods...)
}

func (f *Factory) ClearBaseRoleMods() {
	f.baseRoleMods = nil
}

func (f *Factory) AddBaseRoleMod(mods ...RoleMod) {
	f.baseRoleMods = append(f.baseRoleMods, mods...)
}

func (f *Factory) ClearBaseServiceMods() {
	f.baseServiceMods = nil
}

func (f *Factory) AddBaseServiceMod(mods ...ServiceMod) {
	f.baseServiceMods = append(f.baseServiceMods, mods...)
}

func (f *Factory) ClearBaseTimeslotMods() {
	f.baseTimeslotMods = nil
}

func (f *Factory) AddBaseTimeslotMod(mods ...TimeslotMod) {
	f.baseTimeslotMods = append(f.baseTimeslotMods, mods...)
}

func (f *Factory) ClearBaseUserMods() {
	f.baseUserMods = nil
}

func (f *Factory) AddBaseUserMod(mods ...UserMod) {
	f.baseUserMods = append(f.baseUserMods, mods...)
}
