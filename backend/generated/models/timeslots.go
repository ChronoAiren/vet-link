// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/im"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Timeslot is an object representing the database table.
type Timeslot struct {
	ID        uint32    `db:"id,pk,autoincr" `
	VetID     uint32    `db:"vet_id" `
	StartTime time.Time `db:"start_time" `

	R timeslotR `db:"-" `
}

// TimeslotSlice is an alias for a slice of pointers to Timeslot.
// This should almost always be used instead of []*Timeslot.
type TimeslotSlice []*Timeslot

// Timeslots contains methods to work with the timeslots table
var Timeslots = mysql.NewTablex[*Timeslot, TimeslotSlice, *TimeslotSetter]("timeslots", []string{"id"})

// TimeslotsQuery is a query on the timeslots table
type TimeslotsQuery = *mysql.ViewQuery[*Timeslot, TimeslotSlice]

// TimeslotsStmt is a prepared statment on timeslots
type TimeslotsStmt = bob.QueryStmt[*Timeslot, TimeslotSlice]

// timeslotR is where relationships are stored.
type timeslotR struct {
	VetUser *User // fk_timeslots_users_vet_id
}

// TimeslotSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TimeslotSetter struct {
	ID        omit.Val[uint32]    `db:"id,pk,autoincr" `
	VetID     omit.Val[uint32]    `db:"vet_id" `
	StartTime omit.Val[time.Time] `db:"start_time" `
}

func (s TimeslotSetter) SetColumns() []string {
	vals := make([]string, 0, 3)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.VetID.IsUnset() {
		vals = append(vals, "vet_id")
	}

	if !s.StartTime.IsUnset() {
		vals = append(vals, "start_time")
	}

	return vals
}

func (s TimeslotSetter) Overwrite(t *Timeslot) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.VetID.IsUnset() {
		t.VetID, _ = s.VetID.Get()
	}
	if !s.StartTime.IsUnset() {
		t.StartTime, _ = s.StartTime.Get()
	}
}

func (s TimeslotSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 3)
	if s.ID.IsUnset() {
		vals[0] = mysql.Raw("DEFAULT")
	} else {
		vals[0] = mysql.Arg(s.ID)
	}

	if s.VetID.IsUnset() {
		vals[1] = mysql.Raw("DEFAULT")
	} else {
		vals[1] = mysql.Arg(s.VetID)
	}

	if s.StartTime.IsUnset() {
		vals[2] = mysql.Raw("DEFAULT")
	} else {
		vals[2] = mysql.Arg(s.StartTime)
	}

	return im.Values(vals...)
}

func (s TimeslotSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions("timeslots")...).Apply(q)
}

func (s TimeslotSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 3)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if !s.VetID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "vet_id")...),
			mysql.Arg(s.VetID),
		}})
	}

	if !s.StartTime.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "start_time")...),
			mysql.Arg(s.StartTime),
		}})
	}

	return exprs
}

type timeslotColumnNames struct {
	ID        string
	VetID     string
	StartTime string
}

var TimeslotColumns = buildTimeslotColumns("timeslots")

type timeslotColumns struct {
	tableAlias string
	ID         mysql.Expression
	VetID      mysql.Expression
	StartTime  mysql.Expression
}

func (c timeslotColumns) Alias() string {
	return c.tableAlias
}

func (timeslotColumns) AliasedAs(alias string) timeslotColumns {
	return buildTimeslotColumns(alias)
}

func buildTimeslotColumns(alias string) timeslotColumns {
	return timeslotColumns{
		tableAlias: alias,
		ID:         mysql.Quote(alias, "id"),
		VetID:      mysql.Quote(alias, "vet_id"),
		StartTime:  mysql.Quote(alias, "start_time"),
	}
}

type timeslotWhere[Q mysql.Filterable] struct {
	ID        mysql.WhereMod[Q, uint32]
	VetID     mysql.WhereMod[Q, uint32]
	StartTime mysql.WhereMod[Q, time.Time]
}

func (timeslotWhere[Q]) AliasedAs(alias string) timeslotWhere[Q] {
	return buildTimeslotWhere[Q](buildTimeslotColumns(alias))
}

func buildTimeslotWhere[Q mysql.Filterable](cols timeslotColumns) timeslotWhere[Q] {
	return timeslotWhere[Q]{
		ID:        mysql.Where[Q, uint32](cols.ID),
		VetID:     mysql.Where[Q, uint32](cols.VetID),
		StartTime: mysql.Where[Q, time.Time](cols.StartTime),
	}
}

type timeslotJoins[Q dialect.Joinable] struct {
	typ     string
	VetUser func(context.Context) modAs[Q, userColumns]
}

func (j timeslotJoins[Q]) aliasedAs(alias string) timeslotJoins[Q] {
	return buildTimeslotJoins[Q](buildTimeslotColumns(alias), j.typ)
}

func buildTimeslotJoins[Q dialect.Joinable](cols timeslotColumns, typ string) timeslotJoins[Q] {
	return timeslotJoins[Q]{
		typ:     typ,
		VetUser: timeslotsJoinVetUser[Q](cols, typ),
	}
}

// FindTimeslot retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTimeslot(ctx context.Context, exec bob.Executor, IDPK uint32, cols ...string) (*Timeslot, error) {
	if len(cols) == 0 {
		return Timeslots.Query(
			ctx, exec,
			SelectWhere.Timeslots.ID.EQ(IDPK),
		).One()
	}

	return Timeslots.Query(
		ctx, exec,
		SelectWhere.Timeslots.ID.EQ(IDPK),
		sm.Columns(Timeslots.Columns().Only(cols...)),
	).One()
}

// TimeslotExists checks the presence of a single record by primary key
func TimeslotExists(ctx context.Context, exec bob.Executor, IDPK uint32) (bool, error) {
	return Timeslots.Query(
		ctx, exec,
		SelectWhere.Timeslots.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Timeslot
func (o *Timeslot) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

// Update uses an executor to update the Timeslot
func (o *Timeslot) Update(ctx context.Context, exec bob.Executor, s *TimeslotSetter) error {
	return Timeslots.Update(ctx, exec, s, o)
}

// Delete deletes a single Timeslot record with an executor
func (o *Timeslot) Delete(ctx context.Context, exec bob.Executor) error {
	return Timeslots.Delete(ctx, exec, o)
}

// Reload refreshes the Timeslot using the executor
func (o *Timeslot) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Timeslots.Query(
		ctx, exec,
		SelectWhere.Timeslots.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o TimeslotSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TimeslotSetter) error {
	return Timeslots.Update(ctx, exec, &vals, o...)
}

func (o TimeslotSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Timeslots.Delete(ctx, exec, o...)
}

func (o TimeslotSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uint32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Timeslots.ID.In(IDPK...),
	)

	o2, err := Timeslots.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func timeslotsJoinVetUser[Q dialect.Joinable](from timeslotColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name(ctx).As(to.Alias())).On(
						to.ID.EQ(from.VetID),
					))
				}

				return mods
			},
		}
	}
}

// VetUser starts a query for related objects on users
func (o *Timeslot) VetUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(ctx, exec, append(mods,
		sm.Where(UserColumns.ID.EQ(mysql.Arg(o.VetID))),
	)...)
}

func (os TimeslotSlice) VetUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.VetID)
	}

	return Users.Query(ctx, exec, append(mods,
		sm.Where(mysql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Timeslot) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "VetUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("timeslot cannot load %T as %q", retrieved, name)
		}

		o.R.VetUser = rel

		if rel != nil {
			rel.R.VetTimeslots = TimeslotSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("timeslot has no relationship %q", name)
	}
}

func PreloadTimeslotVetUser(opts ...mysql.PreloadOption) mysql.Preloader {
	return mysql.Preload[*User, UserSlice](orm.Relationship{
		Name: "VetUser",
		Sides: []orm.RelSide{
			{
				From: "timeslots",
				To:   TableNames.Users,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Users.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Timeslots.VetID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadTimeslotVetUser(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTimeslotVetUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TimeslotVetUser", retrieved)
		}

		err := loader.LoadTimeslotVetUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTimeslotVetUser loads the timeslot's VetUser into the .R struct
func (o *Timeslot) LoadTimeslotVetUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.VetUser = nil

	related, err := o.VetUser(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.VetTimeslots = TimeslotSlice{o}

	o.R.VetUser = related
	return nil
}

// LoadTimeslotVetUser loads the timeslot's VetUser into the .R struct
func (os TimeslotSlice) LoadTimeslotVetUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.VetUser(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.VetID != rel.ID {
				continue
			}

			rel.R.VetTimeslots = append(rel.R.VetTimeslots, o)

			o.R.VetUser = rel
			break
		}
	}

	return nil
}

func attachTimeslotVetUser0(ctx context.Context, exec bob.Executor, count int, timeslot0 *Timeslot, user1 *User) (*Timeslot, error) {
	setter := &TimeslotSetter{
		VetID: omit.From(user1.ID),
	}

	err := Timeslots.Update(ctx, exec, setter, timeslot0)
	if err != nil {
		return nil, fmt.Errorf("attachTimeslotVetUser0: %w", err)
	}

	return timeslot0, nil
}

func (timeslot0 *Timeslot) InsertVetUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTimeslotVetUser0(ctx, exec, 1, timeslot0, user1)
	if err != nil {
		return err
	}

	timeslot0.R.VetUser = user1

	user1.R.VetTimeslots = append(user1.R.VetTimeslots, timeslot0)

	return nil
}

func (timeslot0 *Timeslot) AttachVetUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachTimeslotVetUser0(ctx, exec, 1, timeslot0, user1)
	if err != nil {
		return err
	}

	timeslot0.R.VetUser = user1

	user1.R.VetTimeslots = append(user1.R.VetTimeslots, timeslot0)

	return nil
}
