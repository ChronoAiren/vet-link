// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/im"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
)

// Role is an object representing the database table.
type Role struct {
	ID          uint8  `db:"id,pk,autoincr" `
	Description string `db:"description" `

	R roleR `db:"-" `
}

// RoleSlice is an alias for a slice of pointers to Role.
// This should almost always be used instead of []*Role.
type RoleSlice []*Role

// Roles contains methods to work with the roles table
var Roles = mysql.NewTablex[*Role, RoleSlice, *RoleSetter]("roles", []string{"id"}, []string{"description"})

// RolesQuery is a query on the roles table
type RolesQuery = *mysql.ViewQuery[*Role, RoleSlice]

// RolesStmt is a prepared statment on roles
type RolesStmt = bob.QueryStmt[*Role, RoleSlice]

// roleR is where relationships are stored.
type roleR struct {
	Users UserSlice // fk_users_roles_role_id
}

// RoleSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type RoleSetter struct {
	ID          omit.Val[uint8]  `db:"id,pk,autoincr" `
	Description omit.Val[string] `db:"description" `
}

func (s RoleSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	return vals
}

func (s RoleSetter) Overwrite(t *Role) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.Get()
	}
}

func (s RoleSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 2)
	if s.ID.IsUnset() {
		vals[0] = mysql.Raw("DEFAULT")
	} else {
		vals[0] = mysql.Arg(s.ID)
	}

	if s.Description.IsUnset() {
		vals[1] = mysql.Raw("DEFAULT")
	} else {
		vals[1] = mysql.Arg(s.Description)
	}

	return im.Values(vals...)
}

func (s RoleSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions("roles")...).Apply(q)
}

func (s RoleSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "description")...),
			mysql.Arg(s.Description),
		}})
	}

	return exprs
}

type roleColumnNames struct {
	ID          string
	Description string
}

var RoleColumns = buildRoleColumns("roles")

type roleColumns struct {
	tableAlias  string
	ID          mysql.Expression
	Description mysql.Expression
}

func (c roleColumns) Alias() string {
	return c.tableAlias
}

func (roleColumns) AliasedAs(alias string) roleColumns {
	return buildRoleColumns(alias)
}

func buildRoleColumns(alias string) roleColumns {
	return roleColumns{
		tableAlias:  alias,
		ID:          mysql.Quote(alias, "id"),
		Description: mysql.Quote(alias, "description"),
	}
}

type roleWhere[Q mysql.Filterable] struct {
	ID          mysql.WhereMod[Q, uint8]
	Description mysql.WhereMod[Q, string]
}

func (roleWhere[Q]) AliasedAs(alias string) roleWhere[Q] {
	return buildRoleWhere[Q](buildRoleColumns(alias))
}

func buildRoleWhere[Q mysql.Filterable](cols roleColumns) roleWhere[Q] {
	return roleWhere[Q]{
		ID:          mysql.Where[Q, uint8](cols.ID),
		Description: mysql.Where[Q, string](cols.Description),
	}
}

type roleJoins[Q dialect.Joinable] struct {
	typ   string
	Users func(context.Context) modAs[Q, userColumns]
}

func (j roleJoins[Q]) aliasedAs(alias string) roleJoins[Q] {
	return buildRoleJoins[Q](buildRoleColumns(alias), j.typ)
}

func buildRoleJoins[Q dialect.Joinable](cols roleColumns, typ string) roleJoins[Q] {
	return roleJoins[Q]{
		typ:   typ,
		Users: rolesJoinUsers[Q](cols, typ),
	}
}

// FindRole retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindRole(ctx context.Context, exec bob.Executor, IDPK uint8, cols ...string) (*Role, error) {
	if len(cols) == 0 {
		return Roles.Query(
			ctx, exec,
			SelectWhere.Roles.ID.EQ(IDPK),
		).One()
	}

	return Roles.Query(
		ctx, exec,
		SelectWhere.Roles.ID.EQ(IDPK),
		sm.Columns(Roles.Columns().Only(cols...)),
	).One()
}

// RoleExists checks the presence of a single record by primary key
func RoleExists(ctx context.Context, exec bob.Executor, IDPK uint8) (bool, error) {
	return Roles.Query(
		ctx, exec,
		SelectWhere.Roles.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Role
func (o *Role) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

// Update uses an executor to update the Role
func (o *Role) Update(ctx context.Context, exec bob.Executor, s *RoleSetter) error {
	return Roles.Update(ctx, exec, s, o)
}

// Delete deletes a single Role record with an executor
func (o *Role) Delete(ctx context.Context, exec bob.Executor) error {
	return Roles.Delete(ctx, exec, o)
}

// Reload refreshes the Role using the executor
func (o *Role) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Roles.Query(
		ctx, exec,
		SelectWhere.Roles.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o RoleSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals RoleSetter) error {
	return Roles.Update(ctx, exec, &vals, o...)
}

func (o RoleSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Roles.Delete(ctx, exec, o...)
}

func (o RoleSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uint8, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Roles.ID.In(IDPK...),
	)

	o2, err := Roles.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func rolesJoinUsers[Q dialect.Joinable](from roleColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name(ctx).As(to.Alias())).On(
						to.RoleID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// Users starts a query for related objects on users
func (o *Role) Users(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(ctx, exec, append(mods,
		sm.Where(UserColumns.RoleID.EQ(mysql.Arg(o.ID))),
	)...)
}

func (os RoleSlice) Users(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.ID)
	}

	return Users.Query(ctx, exec, append(mods,
		sm.Where(mysql.Group(UserColumns.RoleID).In(PKArgs...)),
	)...)
}

func (o *Role) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Users":
		rels, ok := retrieved.(UserSlice)
		if !ok {
			return fmt.Errorf("role cannot load %T as %q", retrieved, name)
		}

		o.R.Users = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Role = o
			}
		}
		return nil
	default:
		return fmt.Errorf("role has no relationship %q", name)
	}
}

func ThenLoadRoleUsers(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadRoleUsers(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load RoleUsers", retrieved)
		}

		err := loader.LoadRoleUsers(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadRoleUsers loads the role's Users into the .R struct
func (o *Role) LoadRoleUsers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Users = nil

	related, err := o.Users(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Role = o
	}

	o.R.Users = related
	return nil
}

// LoadRoleUsers loads the role's Users into the .R struct
func (os RoleSlice) LoadRoleUsers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.Users(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Users = nil
	}

	for _, o := range os {
		for _, rel := range users {
			if o.ID != rel.RoleID {
				continue
			}

			rel.R.Role = o

			o.R.Users = append(o.R.Users, rel)
		}
	}

	return nil
}

func insertRoleUsers0(ctx context.Context, exec bob.Executor, users1 []*UserSetter, role0 *Role) (UserSlice, error) {
	for i := range users1 {
		users1[i].RoleID = omit.From(role0.ID)
	}

	ret, err := Users.InsertMany(ctx, exec, users1...)
	if err != nil {
		return ret, fmt.Errorf("insertRoleUsers0: %w", err)
	}

	return ret, nil
}

func attachRoleUsers0(ctx context.Context, exec bob.Executor, count int, users1 UserSlice, role0 *Role) (UserSlice, error) {
	setter := &UserSetter{
		RoleID: omit.From(role0.ID),
	}

	err := Users.Update(ctx, exec, setter, users1...)
	if err != nil {
		return nil, fmt.Errorf("attachRoleUsers0: %w", err)
	}

	return users1, nil
}

func (role0 *Role) InsertUsers(ctx context.Context, exec bob.Executor, related ...*UserSetter) error {
	if len(related) == 0 {
		return nil
	}

	users1, err := insertRoleUsers0(ctx, exec, related, role0)
	if err != nil {
		return err
	}

	role0.R.Users = append(role0.R.Users, users1...)

	for _, rel := range users1 {
		rel.R.Role = role0
	}
	return nil
}

func (role0 *Role) AttachUsers(ctx context.Context, exec bob.Executor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	users1 := UserSlice(related)

	_, err = attachRoleUsers0(ctx, exec, len(related), users1, role0)
	if err != nil {
		return err
	}

	role0.R.Users = append(role0.R.Users, users1...)

	for _, rel := range related {
		rel.R.Role = role0
	}

	return nil
}
