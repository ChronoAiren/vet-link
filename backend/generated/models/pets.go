// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/im"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Pet is an object representing the database table.
type Pet struct {
	ID        uint32    `db:"id,pk,autoincr" `
	Name      string    `db:"name" `
	Gender    uint8     `db:"gender" `
	Birthdate time.Time `db:"birthdate" `
	BreedID   uint32    `db:"breed_id" `
	OwnerID   uint32    `db:"owner_id" `

	R petR `db:"-" `
}

// PetSlice is an alias for a slice of pointers to Pet.
// This should almost always be used instead of []*Pet.
type PetSlice []*Pet

// Pets contains methods to work with the pets table
var Pets = mysql.NewTablex[*Pet, PetSlice, *PetSetter]("pets", []string{"id"})

// PetsQuery is a query on the pets table
type PetsQuery = *mysql.ViewQuery[*Pet, PetSlice]

// PetsStmt is a prepared statment on pets
type PetsStmt = bob.QueryStmt[*Pet, PetSlice]

// petR is where relationships are stored.
type petR struct {
	Breed     *Breed // fk_pets_breeds_breed_id
	OwnerUser *User  // fk_pets_users_owner_id
}

// PetSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PetSetter struct {
	ID        omit.Val[uint32]    `db:"id,pk,autoincr" `
	Name      omit.Val[string]    `db:"name" `
	Gender    omit.Val[uint8]     `db:"gender" `
	Birthdate omit.Val[time.Time] `db:"birthdate" `
	BreedID   omit.Val[uint32]    `db:"breed_id" `
	OwnerID   omit.Val[uint32]    `db:"owner_id" `
}

func (s PetSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Gender.IsUnset() {
		vals = append(vals, "gender")
	}

	if !s.Birthdate.IsUnset() {
		vals = append(vals, "birthdate")
	}

	if !s.BreedID.IsUnset() {
		vals = append(vals, "breed_id")
	}

	if !s.OwnerID.IsUnset() {
		vals = append(vals, "owner_id")
	}

	return vals
}

func (s PetSetter) Overwrite(t *Pet) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Gender.IsUnset() {
		t.Gender, _ = s.Gender.Get()
	}
	if !s.Birthdate.IsUnset() {
		t.Birthdate, _ = s.Birthdate.Get()
	}
	if !s.BreedID.IsUnset() {
		t.BreedID, _ = s.BreedID.Get()
	}
	if !s.OwnerID.IsUnset() {
		t.OwnerID, _ = s.OwnerID.Get()
	}
}

func (s PetSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 6)
	if s.ID.IsUnset() {
		vals[0] = mysql.Raw("DEFAULT")
	} else {
		vals[0] = mysql.Arg(s.ID)
	}

	if s.Name.IsUnset() {
		vals[1] = mysql.Raw("DEFAULT")
	} else {
		vals[1] = mysql.Arg(s.Name)
	}

	if s.Gender.IsUnset() {
		vals[2] = mysql.Raw("DEFAULT")
	} else {
		vals[2] = mysql.Arg(s.Gender)
	}

	if s.Birthdate.IsUnset() {
		vals[3] = mysql.Raw("DEFAULT")
	} else {
		vals[3] = mysql.Arg(s.Birthdate)
	}

	if s.BreedID.IsUnset() {
		vals[4] = mysql.Raw("DEFAULT")
	} else {
		vals[4] = mysql.Arg(s.BreedID)
	}

	if s.OwnerID.IsUnset() {
		vals[5] = mysql.Raw("DEFAULT")
	} else {
		vals[5] = mysql.Arg(s.OwnerID)
	}

	return im.Values(vals...)
}

func (s PetSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions("pets")...).Apply(q)
}

func (s PetSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "name")...),
			mysql.Arg(s.Name),
		}})
	}

	if !s.Gender.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "gender")...),
			mysql.Arg(s.Gender),
		}})
	}

	if !s.Birthdate.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "birthdate")...),
			mysql.Arg(s.Birthdate),
		}})
	}

	if !s.BreedID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "breed_id")...),
			mysql.Arg(s.BreedID),
		}})
	}

	if !s.OwnerID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "owner_id")...),
			mysql.Arg(s.OwnerID),
		}})
	}

	return exprs
}

type petColumnNames struct {
	ID        string
	Name      string
	Gender    string
	Birthdate string
	BreedID   string
	OwnerID   string
}

var PetColumns = buildPetColumns("pets")

type petColumns struct {
	tableAlias string
	ID         mysql.Expression
	Name       mysql.Expression
	Gender     mysql.Expression
	Birthdate  mysql.Expression
	BreedID    mysql.Expression
	OwnerID    mysql.Expression
}

func (c petColumns) Alias() string {
	return c.tableAlias
}

func (petColumns) AliasedAs(alias string) petColumns {
	return buildPetColumns(alias)
}

func buildPetColumns(alias string) petColumns {
	return petColumns{
		tableAlias: alias,
		ID:         mysql.Quote(alias, "id"),
		Name:       mysql.Quote(alias, "name"),
		Gender:     mysql.Quote(alias, "gender"),
		Birthdate:  mysql.Quote(alias, "birthdate"),
		BreedID:    mysql.Quote(alias, "breed_id"),
		OwnerID:    mysql.Quote(alias, "owner_id"),
	}
}

type petWhere[Q mysql.Filterable] struct {
	ID        mysql.WhereMod[Q, uint32]
	Name      mysql.WhereMod[Q, string]
	Gender    mysql.WhereMod[Q, uint8]
	Birthdate mysql.WhereMod[Q, time.Time]
	BreedID   mysql.WhereMod[Q, uint32]
	OwnerID   mysql.WhereMod[Q, uint32]
}

func (petWhere[Q]) AliasedAs(alias string) petWhere[Q] {
	return buildPetWhere[Q](buildPetColumns(alias))
}

func buildPetWhere[Q mysql.Filterable](cols petColumns) petWhere[Q] {
	return petWhere[Q]{
		ID:        mysql.Where[Q, uint32](cols.ID),
		Name:      mysql.Where[Q, string](cols.Name),
		Gender:    mysql.Where[Q, uint8](cols.Gender),
		Birthdate: mysql.Where[Q, time.Time](cols.Birthdate),
		BreedID:   mysql.Where[Q, uint32](cols.BreedID),
		OwnerID:   mysql.Where[Q, uint32](cols.OwnerID),
	}
}

type petJoins[Q dialect.Joinable] struct {
	typ       string
	Breed     func(context.Context) modAs[Q, breedColumns]
	OwnerUser func(context.Context) modAs[Q, userColumns]
}

func (j petJoins[Q]) aliasedAs(alias string) petJoins[Q] {
	return buildPetJoins[Q](buildPetColumns(alias), j.typ)
}

func buildPetJoins[Q dialect.Joinable](cols petColumns, typ string) petJoins[Q] {
	return petJoins[Q]{
		typ:       typ,
		Breed:     petsJoinBreed[Q](cols, typ),
		OwnerUser: petsJoinOwnerUser[Q](cols, typ),
	}
}

// FindPet retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPet(ctx context.Context, exec bob.Executor, IDPK uint32, cols ...string) (*Pet, error) {
	if len(cols) == 0 {
		return Pets.Query(
			ctx, exec,
			SelectWhere.Pets.ID.EQ(IDPK),
		).One()
	}

	return Pets.Query(
		ctx, exec,
		SelectWhere.Pets.ID.EQ(IDPK),
		sm.Columns(Pets.Columns().Only(cols...)),
	).One()
}

// PetExists checks the presence of a single record by primary key
func PetExists(ctx context.Context, exec bob.Executor, IDPK uint32) (bool, error) {
	return Pets.Query(
		ctx, exec,
		SelectWhere.Pets.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Pet
func (o *Pet) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

// Update uses an executor to update the Pet
func (o *Pet) Update(ctx context.Context, exec bob.Executor, s *PetSetter) error {
	return Pets.Update(ctx, exec, s, o)
}

// Delete deletes a single Pet record with an executor
func (o *Pet) Delete(ctx context.Context, exec bob.Executor) error {
	return Pets.Delete(ctx, exec, o)
}

// Reload refreshes the Pet using the executor
func (o *Pet) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Pets.Query(
		ctx, exec,
		SelectWhere.Pets.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o PetSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PetSetter) error {
	return Pets.Update(ctx, exec, &vals, o...)
}

func (o PetSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Pets.Delete(ctx, exec, o...)
}

func (o PetSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uint32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Pets.ID.In(IDPK...),
	)

	o2, err := Pets.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func petsJoinBreed[Q dialect.Joinable](from petColumns, typ string) func(context.Context) modAs[Q, breedColumns] {
	return func(ctx context.Context) modAs[Q, breedColumns] {
		return modAs[Q, breedColumns]{
			c: BreedColumns,
			f: func(to breedColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Breeds.Name(ctx).As(to.Alias())).On(
						to.ID.EQ(from.BreedID),
					))
				}

				return mods
			},
		}
	}
}

func petsJoinOwnerUser[Q dialect.Joinable](from petColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name(ctx).As(to.Alias())).On(
						to.ID.EQ(from.OwnerID),
					))
				}

				return mods
			},
		}
	}
}

// Breed starts a query for related objects on breeds
func (o *Pet) Breed(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) BreedsQuery {
	return Breeds.Query(ctx, exec, append(mods,
		sm.Where(BreedColumns.ID.EQ(mysql.Arg(o.BreedID))),
	)...)
}

func (os PetSlice) Breed(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) BreedsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.BreedID)
	}

	return Breeds.Query(ctx, exec, append(mods,
		sm.Where(mysql.Group(BreedColumns.ID).In(PKArgs...)),
	)...)
}

// OwnerUser starts a query for related objects on users
func (o *Pet) OwnerUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(ctx, exec, append(mods,
		sm.Where(UserColumns.ID.EQ(mysql.Arg(o.OwnerID))),
	)...)
}

func (os PetSlice) OwnerUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.OwnerID)
	}

	return Users.Query(ctx, exec, append(mods,
		sm.Where(mysql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Pet) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Breed":
		rel, ok := retrieved.(*Breed)
		if !ok {
			return fmt.Errorf("pet cannot load %T as %q", retrieved, name)
		}

		o.R.Breed = rel

		if rel != nil {
			rel.R.Pets = PetSlice{o}
		}
		return nil
	case "OwnerUser":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("pet cannot load %T as %q", retrieved, name)
		}

		o.R.OwnerUser = rel

		if rel != nil {
			rel.R.OwnerPets = PetSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("pet has no relationship %q", name)
	}
}

func PreloadPetBreed(opts ...mysql.PreloadOption) mysql.Preloader {
	return mysql.Preload[*Breed, BreedSlice](orm.Relationship{
		Name: "Breed",
		Sides: []orm.RelSide{
			{
				From: "pets",
				To:   TableNames.Breeds,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Breeds.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Pets.BreedID,
				},
				ToColumns: []string{
					ColumnNames.Breeds.ID,
				},
			},
		},
	}, Breeds.Columns().Names(), opts...)
}

func ThenLoadPetBreed(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPetBreed(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PetBreed", retrieved)
		}

		err := loader.LoadPetBreed(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPetBreed loads the pet's Breed into the .R struct
func (o *Pet) LoadPetBreed(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Breed = nil

	related, err := o.Breed(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Pets = PetSlice{o}

	o.R.Breed = related
	return nil
}

// LoadPetBreed loads the pet's Breed into the .R struct
func (os PetSlice) LoadPetBreed(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	breeds, err := os.Breed(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range breeds {
			if o.BreedID != rel.ID {
				continue
			}

			rel.R.Pets = append(rel.R.Pets, o)

			o.R.Breed = rel
			break
		}
	}

	return nil
}

func PreloadPetOwnerUser(opts ...mysql.PreloadOption) mysql.Preloader {
	return mysql.Preload[*User, UserSlice](orm.Relationship{
		Name: "OwnerUser",
		Sides: []orm.RelSide{
			{
				From: "pets",
				To:   TableNames.Users,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Users.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Pets.OwnerID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadPetOwnerUser(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPetOwnerUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PetOwnerUser", retrieved)
		}

		err := loader.LoadPetOwnerUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPetOwnerUser loads the pet's OwnerUser into the .R struct
func (o *Pet) LoadPetOwnerUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.OwnerUser = nil

	related, err := o.OwnerUser(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.OwnerPets = PetSlice{o}

	o.R.OwnerUser = related
	return nil
}

// LoadPetOwnerUser loads the pet's OwnerUser into the .R struct
func (os PetSlice) LoadPetOwnerUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.OwnerUser(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.OwnerID != rel.ID {
				continue
			}

			rel.R.OwnerPets = append(rel.R.OwnerPets, o)

			o.R.OwnerUser = rel
			break
		}
	}

	return nil
}

func attachPetBreed0(ctx context.Context, exec bob.Executor, count int, pet0 *Pet, breed1 *Breed) (*Pet, error) {
	setter := &PetSetter{
		BreedID: omit.From(breed1.ID),
	}

	err := Pets.Update(ctx, exec, setter, pet0)
	if err != nil {
		return nil, fmt.Errorf("attachPetBreed0: %w", err)
	}

	return pet0, nil
}

func (pet0 *Pet) InsertBreed(ctx context.Context, exec bob.Executor, related *BreedSetter) error {
	breed1, err := Breeds.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPetBreed0(ctx, exec, 1, pet0, breed1)
	if err != nil {
		return err
	}

	pet0.R.Breed = breed1

	breed1.R.Pets = append(breed1.R.Pets, pet0)

	return nil
}

func (pet0 *Pet) AttachBreed(ctx context.Context, exec bob.Executor, breed1 *Breed) error {
	var err error

	_, err = attachPetBreed0(ctx, exec, 1, pet0, breed1)
	if err != nil {
		return err
	}

	pet0.R.Breed = breed1

	breed1.R.Pets = append(breed1.R.Pets, pet0)

	return nil
}

func attachPetOwnerUser0(ctx context.Context, exec bob.Executor, count int, pet0 *Pet, user1 *User) (*Pet, error) {
	setter := &PetSetter{
		OwnerID: omit.From(user1.ID),
	}

	err := Pets.Update(ctx, exec, setter, pet0)
	if err != nil {
		return nil, fmt.Errorf("attachPetOwnerUser0: %w", err)
	}

	return pet0, nil
}

func (pet0 *Pet) InsertOwnerUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPetOwnerUser0(ctx, exec, 1, pet0, user1)
	if err != nil {
		return err
	}

	pet0.R.OwnerUser = user1

	user1.R.OwnerPets = append(user1.R.OwnerPets, pet0)

	return nil
}

func (pet0 *Pet) AttachOwnerUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachPetOwnerUser0(ctx, exec, 1, pet0, user1)
	if err != nil {
		return err
	}

	pet0.R.OwnerUser = user1

	user1.R.OwnerPets = append(user1.R.OwnerPets, pet0)

	return nil
}
