// Code generated by BobGen mysql v0.28.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/mysql"
	"github.com/stephenafamo/bob/dialect/mysql/dialect"
	"github.com/stephenafamo/bob/dialect/mysql/im"
	"github.com/stephenafamo/bob/dialect/mysql/sm"
	"github.com/stephenafamo/bob/dialect/mysql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
)

// Animal is an object representing the database table.
type Animal struct {
	ID          uint8  `db:"id,pk,autoincr" `
	Description string `db:"description" `

	R animalR `db:"-" `
}

// AnimalSlice is an alias for a slice of pointers to Animal.
// This should almost always be used instead of []*Animal.
type AnimalSlice []*Animal

// Animals contains methods to work with the animals table
var Animals = mysql.NewTablex[*Animal, AnimalSlice, *AnimalSetter]("animals", []string{"id"}, []string{"description"})

// AnimalsQuery is a query on the animals table
type AnimalsQuery = *mysql.ViewQuery[*Animal, AnimalSlice]

// AnimalsStmt is a prepared statment on animals
type AnimalsStmt = bob.QueryStmt[*Animal, AnimalSlice]

// animalR is where relationships are stored.
type animalR struct {
	Breeds BreedSlice // fk_breeds_animals_animal_id
}

// AnimalSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type AnimalSetter struct {
	ID          omit.Val[uint8]  `db:"id,pk,autoincr" `
	Description omit.Val[string] `db:"description" `
}

func (s AnimalSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}

	return vals
}

func (s AnimalSetter) Overwrite(t *Animal) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Description.IsUnset() {
		t.Description, _ = s.Description.Get()
	}
}

func (s AnimalSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 2)
	if s.ID.IsUnset() {
		vals[0] = mysql.Raw("DEFAULT")
	} else {
		vals[0] = mysql.Arg(s.ID)
	}

	if s.Description.IsUnset() {
		vals[1] = mysql.Raw("DEFAULT")
	} else {
		vals[1] = mysql.Arg(s.Description)
	}

	return im.Values(vals...)
}

func (s AnimalSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions("animals")...).Apply(q)
}

func (s AnimalSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "id")...),
			mysql.Arg(s.ID),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			mysql.Quote(append(prefix, "description")...),
			mysql.Arg(s.Description),
		}})
	}

	return exprs
}

type animalColumnNames struct {
	ID          string
	Description string
}

var AnimalColumns = buildAnimalColumns("animals")

type animalColumns struct {
	tableAlias  string
	ID          mysql.Expression
	Description mysql.Expression
}

func (c animalColumns) Alias() string {
	return c.tableAlias
}

func (animalColumns) AliasedAs(alias string) animalColumns {
	return buildAnimalColumns(alias)
}

func buildAnimalColumns(alias string) animalColumns {
	return animalColumns{
		tableAlias:  alias,
		ID:          mysql.Quote(alias, "id"),
		Description: mysql.Quote(alias, "description"),
	}
}

type animalWhere[Q mysql.Filterable] struct {
	ID          mysql.WhereMod[Q, uint8]
	Description mysql.WhereMod[Q, string]
}

func (animalWhere[Q]) AliasedAs(alias string) animalWhere[Q] {
	return buildAnimalWhere[Q](buildAnimalColumns(alias))
}

func buildAnimalWhere[Q mysql.Filterable](cols animalColumns) animalWhere[Q] {
	return animalWhere[Q]{
		ID:          mysql.Where[Q, uint8](cols.ID),
		Description: mysql.Where[Q, string](cols.Description),
	}
}

type animalJoins[Q dialect.Joinable] struct {
	typ    string
	Breeds func(context.Context) modAs[Q, breedColumns]
}

func (j animalJoins[Q]) aliasedAs(alias string) animalJoins[Q] {
	return buildAnimalJoins[Q](buildAnimalColumns(alias), j.typ)
}

func buildAnimalJoins[Q dialect.Joinable](cols animalColumns, typ string) animalJoins[Q] {
	return animalJoins[Q]{
		typ:    typ,
		Breeds: animalsJoinBreeds[Q](cols, typ),
	}
}

// FindAnimal retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindAnimal(ctx context.Context, exec bob.Executor, IDPK uint8, cols ...string) (*Animal, error) {
	if len(cols) == 0 {
		return Animals.Query(
			ctx, exec,
			SelectWhere.Animals.ID.EQ(IDPK),
		).One()
	}

	return Animals.Query(
		ctx, exec,
		SelectWhere.Animals.ID.EQ(IDPK),
		sm.Columns(Animals.Columns().Only(cols...)),
	).One()
}

// AnimalExists checks the presence of a single record by primary key
func AnimalExists(ctx context.Context, exec bob.Executor, IDPK uint8) (bool, error) {
	return Animals.Query(
		ctx, exec,
		SelectWhere.Animals.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Animal
func (o *Animal) PrimaryKeyVals() bob.Expression {
	return mysql.Arg(o.ID)
}

// Update uses an executor to update the Animal
func (o *Animal) Update(ctx context.Context, exec bob.Executor, s *AnimalSetter) error {
	return Animals.Update(ctx, exec, s, o)
}

// Delete deletes a single Animal record with an executor
func (o *Animal) Delete(ctx context.Context, exec bob.Executor) error {
	return Animals.Delete(ctx, exec, o)
}

// Reload refreshes the Animal using the executor
func (o *Animal) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Animals.Query(
		ctx, exec,
		SelectWhere.Animals.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o AnimalSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals AnimalSetter) error {
	return Animals.Update(ctx, exec, &vals, o...)
}

func (o AnimalSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Animals.Delete(ctx, exec, o...)
}

func (o AnimalSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uint8, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Animals.ID.In(IDPK...),
	)

	o2, err := Animals.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func animalsJoinBreeds[Q dialect.Joinable](from animalColumns, typ string) func(context.Context) modAs[Q, breedColumns] {
	return func(ctx context.Context) modAs[Q, breedColumns] {
		return modAs[Q, breedColumns]{
			c: BreedColumns,
			f: func(to breedColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Breeds.Name(ctx).As(to.Alias())).On(
						to.AnimalID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// Breeds starts a query for related objects on breeds
func (o *Animal) Breeds(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) BreedsQuery {
	return Breeds.Query(ctx, exec, append(mods,
		sm.Where(BreedColumns.AnimalID.EQ(mysql.Arg(o.ID))),
	)...)
}

func (os AnimalSlice) Breeds(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) BreedsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = mysql.ArgGroup(o.ID)
	}

	return Breeds.Query(ctx, exec, append(mods,
		sm.Where(mysql.Group(BreedColumns.AnimalID).In(PKArgs...)),
	)...)
}

func (o *Animal) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Breeds":
		rels, ok := retrieved.(BreedSlice)
		if !ok {
			return fmt.Errorf("animal cannot load %T as %q", retrieved, name)
		}

		o.R.Breeds = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Animal = o
			}
		}
		return nil
	default:
		return fmt.Errorf("animal has no relationship %q", name)
	}
}

func ThenLoadAnimalBreeds(queryMods ...bob.Mod[*dialect.SelectQuery]) mysql.Loader {
	return mysql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadAnimalBreeds(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load AnimalBreeds", retrieved)
		}

		err := loader.LoadAnimalBreeds(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadAnimalBreeds loads the animal's Breeds into the .R struct
func (o *Animal) LoadAnimalBreeds(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Breeds = nil

	related, err := o.Breeds(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Animal = o
	}

	o.R.Breeds = related
	return nil
}

// LoadAnimalBreeds loads the animal's Breeds into the .R struct
func (os AnimalSlice) LoadAnimalBreeds(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	breeds, err := os.Breeds(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Breeds = nil
	}

	for _, o := range os {
		for _, rel := range breeds {
			if o.ID != rel.AnimalID {
				continue
			}

			rel.R.Animal = o

			o.R.Breeds = append(o.R.Breeds, rel)
		}
	}

	return nil
}

func insertAnimalBreeds0(ctx context.Context, exec bob.Executor, breeds1 []*BreedSetter, animal0 *Animal) (BreedSlice, error) {
	for i := range breeds1 {
		breeds1[i].AnimalID = omit.From(animal0.ID)
	}

	ret, err := Breeds.InsertMany(ctx, exec, breeds1...)
	if err != nil {
		return ret, fmt.Errorf("insertAnimalBreeds0: %w", err)
	}

	return ret, nil
}

func attachAnimalBreeds0(ctx context.Context, exec bob.Executor, count int, breeds1 BreedSlice, animal0 *Animal) (BreedSlice, error) {
	setter := &BreedSetter{
		AnimalID: omit.From(animal0.ID),
	}

	err := Breeds.Update(ctx, exec, setter, breeds1...)
	if err != nil {
		return nil, fmt.Errorf("attachAnimalBreeds0: %w", err)
	}

	return breeds1, nil
}

func (animal0 *Animal) InsertBreeds(ctx context.Context, exec bob.Executor, related ...*BreedSetter) error {
	if len(related) == 0 {
		return nil
	}

	breeds1, err := insertAnimalBreeds0(ctx, exec, related, animal0)
	if err != nil {
		return err
	}

	animal0.R.Breeds = append(animal0.R.Breeds, breeds1...)

	for _, rel := range breeds1 {
		rel.R.Animal = animal0
	}
	return nil
}

func (animal0 *Animal) AttachBreeds(ctx context.Context, exec bob.Executor, related ...*Breed) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	breeds1 := BreedSlice(related)

	_, err = attachAnimalBreeds0(ctx, exec, len(related), breeds1, animal0)
	if err != nil {
		return err
	}

	animal0.R.Breeds = append(animal0.R.Breeds, breeds1...)

	for _, rel := range related {
		rel.R.Animal = animal0
	}

	return nil
}
